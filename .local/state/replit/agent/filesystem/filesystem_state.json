{"file_contents":{"README.md":{"content":"# Report Intelligence Platform\n\nA production-ready AI-powered report analysis platform with admin-only uploads and public read access, featuring interactive visualizations and automated document processing.\n\n## Features\n\n- **Admin Authentication**: Secure JWT-based authentication with password protection\n- **File Upload**: Support for HTML, PDF, and image files with Supabase storage\n- **AI Analysis**: Automated document analysis using OpenAI with structured JSON output\n- **Public Dashboard**: Browse published reports with search and filtering\n- **Interactive Charts**: Data visualizations using Recharts from AI analysis\n- **Report Management**: Complete admin workflow for upload, analyze, publish, delete\n- **Responsive Design**: Mobile-friendly interface with dark mode support\n\n## Tech Stack\n\n### Frontend\n- React 18 with Vite\n- Tailwind CSS for styling\n- Recharts for data visualization\n- TanStack Query for data fetching\n- Wouter for routing\n- Shadcn/ui components\n\n### Backend\n- Express.js with Vercel serverless support\n- Supabase (PostgreSQL + Storage)\n- OpenAI API for document analysis\n- JWT authentication with HttpOnly cookies\n- Multer for file uploads\n\n## Setup Instructions\n\n### 1. Environment Configuration\n\nCopy `.env.example` to `.env` and configure the following:\n\n```bash\ncp .env.example .env\n","size_bytes":1319},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2728},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport cookieParser from \"cookie-parser\";\nimport multer from \"multer\";\nimport jwt from 'jsonwebtoken'; // Assuming jwt is available\nimport { loginSchema } from \"@shared/schema\";\nimport { requireAdmin, getUser, verifyPassword, signToken } from \"./lib/auth\";\nimport { storage, fileStorage } from \"./storage\";\nimport { extractText } from \"./lib/extractors\";\nimport { analyzeDocument } from \"./lib/ai\";\n\n// Define JWT_SECRET, assuming it's available in the environment or imported\nconst JWT_SECRET = process.env.JWT_SECRET;\nif (!JWT_SECRET) {\n  throw new Error(\"JWT_SECRET environment variable is required for secure authentication\");\n}\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 20 * 1024 * 1024, // 20MB\n    files: 10\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = [\n      \"text/html\"\n    ];\n\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error(\"فقط فایل‌های HTML پذیرفته می‌شوند\"));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.use(cookieParser());\n\n  // Serve object storage files \n  app.get(\"/objects/:objectPath(*)\", requireAdmin, async (req, res) => {\n    try {\n      const objectPath = req.params.objectPath || \"\";\n      const buffer = await fileStorage.getFile(objectPath);\n\n      if (!buffer) {\n        return res.status(404).json({ message: \"File not found\" });\n      }\n\n      // Set appropriate content type and security headers\n      const ext = objectPath.split('.').pop()?.toLowerCase() || '';\n      const contentType = ext === 'html' ? 'text/plain' : 'application/octet-stream';\n\n      // Force download for HTML files to prevent same-origin execution\n      if (ext === 'html') {\n        res.set('Content-Disposition', 'attachment; filename=' + objectPath.split('/').pop());\n      }\n      \n      res.set('Content-Type', contentType);\n      res.set('X-Content-Type-Options', 'nosniff');\n      res.send(buffer);\n    } catch (error) {\n      console.error('Object file serving error:', error);\n      res.status(500).json({ message: \"Failed to serve file\" });\n    }\n  });\n\n  // Serve in-memory uploaded files\n  app.get(\"/uploads/:fileName(*)\", async (req, res) => {\n    try {\n      const fileName = req.params.fileName || \"\";\n      const buffer = await fileStorage.getFile(fileName);\n\n      if (!buffer) {\n        return res.status(404).json({ message: \"File not found\" });\n      }\n\n      // Set appropriate content type and security headers\n      const ext = fileName.split('.').pop()?.toLowerCase() || '';\n      const contentType = ext === 'html' ? 'text/plain' : 'application/octet-stream';\n\n      // Force download for HTML files to prevent same-origin execution\n      if (ext === 'html') {\n        res.set('Content-Disposition', 'attachment; filename=' + fileName);\n      }\n      \n      res.set('Content-Type', contentType);\n      res.set('X-Content-Type-Options', 'nosniff');\n      res.send(buffer);\n    } catch (error) {\n      console.error('File serving error:', error);\n      res.status(500).json({ message: \"Failed to serve file\" });\n    }\n  });\n\n  // Add CSRF protection header requirement for admin routes\n  const requireCSRF = (req: any, res: any, next: any) => {\n    // Check for X-Requested-With header\n    if (!req.get(\"X-Requested-With\")) {\n      return res.status(403).json({ message: \"CSRF protection required\" });\n    }\n    \n    // Additional origin validation for admin requests\n    const origin = req.get('Origin');\n    const referer = req.get('Referer');\n    const host = req.get('Host');\n    \n    // Allow requests from exact same origin only\n    const expectedOrigin = `https://${host}`;\n    const expectedOriginHttp = `http://${host}`;\n    \n    if (origin && (origin === expectedOrigin || origin === expectedOriginHttp)) {\n      return next();\n    }\n    if (referer && (referer.startsWith(expectedOrigin) || referer.startsWith(expectedOriginHttp))) {\n      return next();\n    }\n    \n    // For requests without origin/referer (like API tools), allow if X-Requested-With is present\n    if (!origin && !referer) {\n      return next();\n    }\n    \n    return res.status(403).json({ message: \"Invalid request origin\" });\n  };\n\n  // Authentication endpoints\n  app.post(\"/api/login\", async (req, res) => {\n    try {\n      const { password } = loginSchema.parse(req.body);\n\n      if (!verifyPassword(password)) {\n        return res.status(401).json({ message: \"Invalid password\" });\n      }\n\n      const token = signToken({ role: \"admin\" });\n\n      res.cookie(\"ri_admin\", token, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"strict\",\n        maxAge: 24 * 60 * 60 * 1000 // 24 hours\n      });\n\n      res.json({ message: \"Login successful\", role: \"admin\" });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request\" });\n    }\n  });\n\n  app.get(\"/api/me\", (req, res) => {\n    const user = getUser(req);\n    res.json(user);\n  });\n\n  app.post(\"/api/logout\", (req, res) => {\n    res.clearCookie(\"ri_admin\");\n    res.json({ message: \"Logged out successfully\" });\n  });\n\n  // File upload endpoint (admin only)\n  app.post(\"/api/upload\", requireCSRF, requireAdmin, upload.array(\"files\", 10), async (req, res) => {\n    try {\n      const files = req.files as Express.Multer.File[];\n      if (!files || files.length === 0) {\n        return res.status(400).json({ message: \"No files provided\" });\n      }\n\n      const { title } = req.body;\n      if (!title) {\n        return res.status(400).json({ message: \"Title is required\" });\n      }\n\n      // Calculate total size\n      const totalSizeKb = Math.round(\n        files.reduce((sum, file) => sum + file.size, 0) / 1024\n      );\n\n      // Create report record\n      const report = await storage.createReport({\n        title,\n        size_kb: totalSizeKb.toString(),\n        status: \"uploaded\"\n      });\n\n      // Upload files to Supabase Storage and extract text\n      const uploadedFiles = [];\n      let extractedTexts = [];\n\n      for (const file of files) {\n        try {\n          // Upload file\n          const fileItem = await fileStorage.uploadFile(file, report.id);\n          uploadedFiles.push(fileItem);\n\n          // Extract text from file and log for debugging\n          console.log(`Extracting text from ${file.originalname} (${file.mimetype}, ${file.size} bytes)`);\n          const extractedText = await extractText(file);\n          console.log(`Extracted text length: ${extractedText.length} characters`);\n          console.log(`First 200 chars: ${extractedText.substring(0, 200)}...`);\n          extractedTexts.push(`File: ${file.originalname}\\n${extractedText}`);\n        } catch (error) {\n          console.error(`Failed to process ${file.originalname}:`, error);\n          // Continue processing other files\n          extractedTexts.push(`File: ${file.originalname}\\nError: Could not extract text from this file.`);\n        }\n      }\n\n      // Save extracted text in report for faster analysis\n      const fullCorpus = `Report Title: ${title}\\n\\n${extractedTexts.join('\\n\\n')}`;\n\n      // Update report with file URLs, extracted date, and extracted text\n      await storage.updateReport(report.id, {\n        files: uploadedFiles,\n        extracted_date: new Date().toISOString(),\n        extracted_text: fullCorpus\n      });\n\n      res.json({\n        reportId: report.id,\n        files: uploadedFiles,\n        message: \"Files uploaded successfully\"\n      });\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Upload failed\"\n      });\n    }\n  });\n\n  // Analyze report endpoint (admin only)\n  app.post(\"/api/analyze/:id\", requireCSRF, requireAdmin, async (req, res) => {\n    try {\n      const reportId = parseInt(req.params.id);\n\n      const report = await storage.getReport(reportId);\n\n      if (!report) {\n        return res.status(404).json({ message: \"Report not found\" });\n      }\n\n      if (!report.files || report.files.length === 0) {\n        return res.status(400).json({ message: \"No files to analyze\" });\n      }\n\n      // Use saved extracted text if available, otherwise extract from files\n      let corpus = `Report Title: ${report.title}\\n\\n`;\n      \n      if (report.extracted_text) {\n        console.log(\"Using saved extracted text\");\n        corpus = report.extracted_text;\n      } else {\n        console.log(\"No saved text found, extracting from files...\");\n        let extractedTexts = [];\n\n        // Process each file to extract text content\n        for (const fileItem of report.files) {\n          try {\n            // Fetch the file from storage - handle both old uploads/ and new objects/ URLs\n            let fileName = fileItem.url;\n            if (fileName.startsWith('/uploads/')) {\n              fileName = fileName.replace('/uploads/', '');\n            } else if (fileName.startsWith('/objects/')) {\n              fileName = fileName.replace('/objects/', '');\n            } else if (fileName.startsWith('uploads/')) {\n              fileName = fileName.replace('uploads/', '');\n            }\n            \n            console.log(`Fetching file: ${fileName}`);\n            const fileBuffer = await fileStorage.getFile(fileName);\n            if (fileBuffer) {\n              // Create a mock file object for text extraction\n              const mockFile = {\n                buffer: fileBuffer,\n                originalname: fileItem.file_name,\n                mimetype: fileItem.type === 'html' ? 'text/html' : fileItem.type\n              } as Express.Multer.File;\n\n              const extractedText = await extractText(mockFile);\n              extractedTexts.push(`File: ${fileItem.file_name}\\n${extractedText}`);\n              console.log(`Extracted ${extractedText.length} characters from ${fileItem.file_name}`);\n            } else {\n              console.warn(`File not found: ${fileName}`);\n              // Fallback to metadata if file can't be retrieved\n              extractedTexts.push(`File: ${fileItem.file_name} (${fileItem.type})\\n[File content not accessible for analysis]\\n`);\n            }\n          } catch (error) {\n            console.error(`Failed to extract text from ${fileItem.file_name}:`, error);\n            // Continue with other files\n            extractedTexts.push(`File: ${fileItem.file_name} (${fileItem.type})\\n[Text extraction failed]\\n`);\n          }\n        }\n\n        corpus = `Report Title: ${report.title}\\n\\n${extractedTexts.join('\\n\\n')}`;\n        \n        // Save the extracted text for future use\n        await storage.updateReport(reportId, {\n          extracted_text: corpus\n        });\n      }\n\n      if (!corpus.trim()) {\n        return res.status(400).json({ message: \"No text content available for analysis\" });\n      }\n\n      // Analyze with AI\n      const { aiJson, aiMarkdown } = await analyzeDocument(corpus);\n\n      // Update report with analysis\n      await storage.updateReport(reportId, {\n        ai_json: aiJson,\n        ai_markdown: aiMarkdown,\n        score: aiJson.score?.toString() || \"0\",\n        status: \"analyzed\"\n      });\n\n      res.json({\n        message: \"Analysis completed successfully\",\n        score: aiJson.score || 0,\n        ai_json: aiJson,\n        ai_markdown: aiMarkdown\n      });\n    } catch (error) {\n      console.error(\"Analysis error:\", error);\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Analysis failed\"\n      });\n    }\n  });\n\n  // Publish report endpoint (admin only)\n  app.post(\"/api/publish/:id\", requireCSRF, requireAdmin, async (req, res) => {\n    try {\n      const reportId = parseInt(req.params.id);\n\n      const report = await storage.getReport(reportId);\n\n      if (!report) {\n        return res.status(404).json({ message: \"Report not found\" });\n      }\n\n      if (report.status !== \"analyzed\") {\n        return res.status(400).json({ message: \"Report must be analyzed before publishing\" });\n      }\n\n      await storage.updateReport(reportId, {\n        is_published: true,\n        status: \"published\"\n      });\n\n      res.json({ message: \"Report published successfully\" });\n    } catch (error) {\n      console.error(\"Publish error:\", error);\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Publishing failed\"\n      });\n    }\n  });\n\n  // Delete report endpoint (admin only)\n  app.delete(\"/api/delete/:id\", requireCSRF, requireAdmin, async (req, res) => {\n    try {\n      const reportId = parseInt(req.params.id);\n\n      const report = await storage.getReport(reportId);\n\n      if (!report) {\n        return res.status(404).json({ message: \"Report not found\" });\n      }\n\n      // Delete files from storage\n      if (report.files) {\n        for (const file of report.files) {\n          try {\n            await fileStorage.deleteFile(file.url);\n          } catch (error) {\n            console.error(`Failed to delete file ${file.file_name}:`, error);\n          }\n        }\n      }\n\n      // Delete report from database\n      await storage.deleteReport(reportId);\n\n      res.json({ message: \"Report deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete error:\", error);\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Deletion failed\"\n      });\n    }\n  });\n\n  // Public endpoints\n  app.get(\"/api/list\", async (req, res) => {\n    try {\n      const publishedReports = await storage.getPublishedReports();\n\n      res.json(publishedReports);\n    } catch (error) {\n      console.error(\"List error:\", error);\n      res.status(500).json({ message: \"Failed to fetch reports\" });\n    }\n  });\n\n  // Get single report endpoint (public read for published, admin for all)\n  app.get(\"/api/report/:id\", async (req, res) => {\n    try {\n      const reportId = parseInt(req.params.id);\n\n      const report = await storage.getReport(reportId);\n\n      if (!report) {\n        return res.status(404).json({ message: \"Report not found\" });\n      }\n\n      // Check if report is published for public access, or if user is admin\n      const user = getUser(req);\n      const isAdmin = user.role === \"admin\";\n\n      // Allow access if published OR if admin\n      if (!report.is_published && !isAdmin) {\n        return res.status(404).json({ message: \"Report not found\" });\n      }\n\n      res.json(report);\n    } catch (error) {\n      console.error(\"Get report error:\", error);\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Failed to get report\"\n      });\n    }\n  });\n\n  // Admin-only report management endpoints\n  app.get(\"/api/admin/reports\", requireAdmin, async (req, res) => {\n    try {\n      const allReports = await storage.getAllReports();\n\n      res.json(allReports);\n    } catch (error) {\n      console.error(\"Admin reports fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch reports\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":15109},"server/storage.ts":{"content":"import { db } from \"./lib/supabase\";\nimport { reports, type Report, type InsertReport, type FileItem } from \"@shared/schema\";\nimport { eq, desc } from \"drizzle-orm\";\nimport * as supabaseStorage from \"./lib/storage\";\nimport { ObjectStorageService, objectStorageClient } from \"./objectStorage\";\nimport { setObjectAclPolicy } from \"./objectAcl\";\n\nexport interface IStorage {\n  // Report methods\n  createReport(report: InsertReport): Promise<Report>;\n  getReport(id: number): Promise<Report | undefined>;\n  getPublishedReports(): Promise<Report[]>;\n  getAllReports(): Promise<Report[]>;\n  updateReport(id: number, updates: Partial<Report>): Promise<Report | undefined>;\n  deleteReport(id: number): Promise<boolean>;\n}\n\nexport interface IFileStorage {\n  uploadFile(file: Express.Multer.File, reportId: number): Promise<FileItem>;\n  deleteFile(url: string): Promise<void>;\n  getFile(fileName: string): Promise<Buffer | null>; // Added getFile method signature\n}\n\nexport class DatabaseStorage implements IStorage {\n  async createReport(report: InsertReport): Promise<Report> {\n    const [created] = await db.insert(reports).values([report]).returning();\n    return created;\n  }\n\n  async getReport(id: number): Promise<Report | undefined> {\n    const [report] = await db.select().from(reports).where(eq(reports.id, id));\n    return report;\n  }\n\n  async getPublishedReports(): Promise<Report[]> {\n    return await db.select()\n      .from(reports)\n      .where(eq(reports.is_published, true))\n      .orderBy(desc(reports.updated_at));\n  }\n\n  async getAllReports(): Promise<Report[]> {\n    return await db.select()\n      .from(reports)\n      .orderBy(desc(reports.updated_at));\n  }\n\n  async updateReport(id: number, updates: Partial<Report>): Promise<Report | undefined> {\n    const [updated] = await db.update(reports)\n      .set({ ...updates, updated_at: new Date() })\n      .where(eq(reports.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteReport(id: number): Promise<boolean> {\n    try {\n      const result = await db.delete(reports).where(eq(reports.id, id)).returning();\n      return result.length > 0;\n    } catch (error) {\n      console.error(\"Database delete error:\", error);\n      return false;\n    }\n  }\n}\n\nexport class MemStorage implements IStorage {\n  private reports: Map<number, Report> = new Map();\n  private nextId = 1;\n\n  async createReport(report: InsertReport): Promise<Report> {\n    const now = new Date();\n    const newReport: Report = {\n      id: this.nextId++,\n      upload_date: now,\n      updated_at: now,\n      files: [] as FileItem[],\n      status: \"uploaded\" as const,\n      ...report\n    };\n    this.reports.set(newReport.id, newReport);\n    return newReport;\n  }\n\n  async getReport(id: number): Promise<Report | undefined> {\n    return this.reports.get(id);\n  }\n\n  async getPublishedReports(): Promise<Report[]> {\n    return Array.from(this.reports.values())\n      .filter(report => report.is_published)\n      .sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());\n  }\n\n  async getAllReports(): Promise<Report[]> {\n    return Array.from(this.reports.values())\n      .sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());\n  }\n\n  async updateReport(id: number, updates: Partial<Report>): Promise<Report | undefined> {\n    const existing = this.reports.get(id);\n    if (!existing) return undefined;\n\n    const updated: Report = {\n      ...existing,\n      ...updates,\n      updated_at: new Date()\n    };\n    this.reports.set(id, updated);\n    return updated;\n  }\n\n  async deleteReport(id: number): Promise<boolean> {\n    return this.reports.delete(id);\n  }\n}\n\nexport class ObjectFileStorage implements IFileStorage {\n  private objectStorage = new ObjectStorageService();\n\n  async uploadFile(file: Express.Multer.File, reportId: number): Promise<FileItem> {\n    const privateDir = this.objectStorage.getPrivateObjectDir();\n    const fileName = `uploads/${reportId}/${Date.now()}-${file.originalname}`;\n    const fullPath = `${privateDir}/${fileName}`;\n    \n    const { bucketName, objectName } = this.parseObjectPath(fullPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n\n    // Upload file buffer to object storage\n    await objectFile.save(file.buffer, {\n      metadata: {\n        contentType: file.mimetype,\n      },\n    });\n\n    // Set ACL policy for the file (make it accessible to admin)\n    await setObjectAclPolicy(objectFile, {\n      owner: \"admin\",\n      visibility: \"private\"\n    });\n\n    const fileType = this.getFileType(file.mimetype);\n    const url = `/objects/${fileName}`;\n\n    return {\n      type: fileType,\n      url,\n      file_name: file.originalname,\n      size_kb: Math.round(file.size / 1024)\n    };\n  }\n\n  async deleteFile(url: string): Promise<void> {\n    try {\n      const objectFile = await this.objectStorage.getObjectEntityFile(url);\n      await objectFile.delete();\n    } catch (error) {\n      console.error(\"Failed to delete object file:\", error);\n    }\n  }\n\n  async getFile(fileName: string): Promise<Buffer | null> {\n    try {\n      const objectPath = `/objects/${fileName}`;\n      const objectFile = await this.objectStorage.getObjectEntityFile(objectPath);\n      const [fileBuffer] = await objectFile.download();\n      return fileBuffer;\n    } catch (error) {\n      console.error(\"Failed to get object file:\", error);\n      return null;\n    }\n  }\n\n  private parseObjectPath(path: string): { bucketName: string; objectName: string } {\n    if (!path.startsWith(\"/\")) {\n      path = `/${path}`;\n    }\n    const pathParts = path.split(\"/\");\n    if (pathParts.length < 3) {\n      throw new Error(\"Invalid path: must contain at least a bucket name\");\n    }\n\n    const bucketName = pathParts[1];\n    const objectName = pathParts.slice(2).join(\"/\");\n\n    return { bucketName, objectName };\n  }\n\n  private getFileType(mimetype: string): \"html\" | \"pdf\" | \"image\" {\n    if (mimetype === \"text/html\") return \"html\";\n    if (mimetype === \"application/pdf\") return \"pdf\";\n    if (mimetype.startsWith(\"image/\")) return \"image\";\n    throw new Error(`Unsupported file type: ${mimetype}`);\n  }\n}\n\nexport class SupabaseFileStorage implements IFileStorage {\n  async uploadFile(file: Express.Multer.File, reportId: number): Promise<FileItem> {\n    return await supabaseStorage.uploadFile(file, reportId);\n  }\n\n  async deleteFile(url: string): Promise<void> {\n    return await supabaseStorage.deleteFile(url);\n  }\n\n  async getFile(fileName: string): Promise<Buffer | null> {\n    // For Supabase storage, files are served directly via public URLs\n    // This method is not used for Supabase but needed for interface compatibility\n    return null;\n  }\n}\n\nexport class MemoryFileStorage implements IFileStorage {\n  private files: Map<string, Buffer> = new Map();\n\n  async uploadFile(file: Express.Multer.File, reportId: number): Promise<FileItem> {\n    const fileName = `${reportId}/${Date.now()}-${file.originalname}`;\n    const url = `/uploads/${fileName}`;\n\n    // Store file buffer in memory\n    this.files.set(fileName, file.buffer);\n\n    const fileType = this.getFileType(file.mimetype);\n\n    return {\n      type: fileType,\n      url,\n      file_name: file.originalname,\n      size_kb: Math.round(file.size / 1024)\n    };\n  }\n\n  async deleteFile(url: string): Promise<void> {\n    const fileName = url.replace('/uploads/', '');\n    this.files.delete(fileName);\n  }\n\n  // Method to serve files (for Express route)\n  async getFile(fileName: string): Promise<Buffer | null> {\n    return this.files.get(fileName) || null;\n  }\n\n  private getFileType(mimetype: string): \"html\" | \"pdf\" | \"image\" {\n    if (mimetype === \"text/html\") return \"html\";\n    if (mimetype === \"application/pdf\") return \"pdf\";\n    if (mimetype.startsWith(\"image/\")) return \"image\";\n    throw new Error(`Unsupported file type: ${mimetype}`);\n  }\n}\n\n// Create storage instances with safe fallbacks\nfunction createStorage(): IStorage {\n  // Use database storage if available, fallback to memory storage\n  if (process.env.DATABASE_URL) {\n    try {\n      console.log(\"Using database storage\");\n      return new DatabaseStorage();\n    } catch (error) {\n      console.warn(\"Database connection failed, falling back to in-memory storage:\", error);\n      return new MemStorage();\n    }\n  }\n  console.log(\"Using in-memory storage\");\n  return new MemStorage();\n}\n\nfunction createFileStorage(): IFileStorage {\n  // Try to use Object Storage first (persistent storage)\n  if (process.env.PRIVATE_OBJECT_DIR && process.env.DEFAULT_OBJECT_STORAGE_BUCKET_ID) {\n    try {\n      console.log(\"Using Object Storage for file storage\");\n      return new ObjectFileStorage();\n    } catch (error) {\n      console.warn(\"Object Storage failed, trying alternatives:\", error);\n    }\n  }\n\n  // Try to use Supabase storage if configured\n  if (process.env.VITE_SUPABASE_URL && process.env.SUPABASE_SERVICE_ROLE_KEY) {\n    try {\n      console.log(\"Using Supabase file storage\");\n      return new SupabaseFileStorage();\n    } catch (error) {\n      console.warn(\"Supabase file storage failed, falling back to memory storage:\", error);\n    }\n  }\n  \n  console.log(\"Using in-memory file storage\");\n  return new MemoryFileStorage();\n}\n\nexport const storage = createStorage();\nexport const fileStorage = createFileStorage();","size_bytes":9329},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, bigint, timestamp, numeric, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const reports = pgTable(\"reports\", {\n  id: bigint(\"id\", { mode: \"number\" }).primaryKey().generatedByDefaultAsIdentity(),\n  title: text(\"title\").notNull(),\n  upload_date: timestamp(\"upload_date\").defaultNow().notNull(),\n  size_kb: numeric(\"size_kb\").notNull(),\n  extracted_date: text(\"extracted_date\"),\n  extracted_text: text(\"extracted_text\"),\n  status: text(\"status\", { enum: [\"uploaded\", \"analyzed\", \"published\"] }).default(\"uploaded\").notNull(),\n  content_url: text(\"content_url\"),\n  files: jsonb(\"files\").$type<FileItem[]>().default([]).notNull(),\n  ai_json: jsonb(\"ai_json\").$type<AIAnalysis | null>(),\n  ai_markdown: text(\"ai_markdown\"),\n  score: numeric(\"score\"),\n  updated_at: timestamp(\"updated_at\").defaultNow().notNull(),\n  is_published: boolean(\"is_published\").default(false).notNull()\n});\n\nexport interface FileItem {\n  type: \"html\" | \"pdf\" | \"image\";\n  url: string;\n  file_name: string;\n  size_kb: number;\n}\n\nexport interface KPI {\n  name: string;\n  value: string;\n  description: string;\n  trend: \"up\" | \"down\" | \"stable\";\n  percentage: number;\n}\n\nexport interface Chart {\n  type: \"line\" | \"bar\" | \"pie\" | \"area\";\n  title: string;\n  data: Array<Record<string, any>>;\n  xAxisKey?: string;\n  yAxisKey?: string;\n}\n\nexport interface WeeklyGoal {\n  title: string;\n  description: string;\n  metrics?: string[];\n}\n\nexport interface Milestone {\n  title: string;\n  date: string;\n  completed: boolean;\n}\n\nexport interface RiskMitigation {\n  title: string;\n  mitigation: string;\n  severity: \"high\" | \"medium\" | \"low\";\n}\n\nexport interface AIAnalysis {\n  kpis: KPI[];\n  trend_summary: string;\n  insights: string[];\n  score: number;\n  charts: Chart[];\n  next_month_plan: {\n    weekly_plan: WeeklyGoal[][];\n    milestones: Milestone[];\n    risks_mitigations: RiskMitigation[];\n  };\n}\n\nexport const insertReportSchema = createInsertSchema(reports).omit({\n  id: true,\n  upload_date: true,\n  updated_at: true\n});\n\nexport const updateReportSchema = insertReportSchema.partial();\n\nexport type InsertReport = z.infer<typeof insertReportSchema>;\nexport type Report = typeof reports.$inferSelect;\nexport type UpdateReport = z.infer<typeof updateReportSchema>;\n\n// Auth schemas\nexport const loginSchema = z.object({\n  password: z.string().min(1, \"Password is required\")\n});\n\nexport type LoginRequest = z.infer<typeof loginSchema>;\n\nexport interface AdminUser {\n  role: \"admin\";\n}\n\nexport interface PublicUser {\n  role: \"public\";\n}\n\nexport type User = AdminUser | PublicUser;\n","size_bytes":2688},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { BrainCircuit, Search, Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport DashboardPage from \"@/pages/dashboard\";\nimport ReportPage from \"@/pages/report\";\nimport AdminPage from \"@/pages/admin\";\nimport AnalysisPage from \"@/pages/Analysis\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [location] = useLocation();\n\n  return (\n    <header className=\"sticky top-0 z-50 bg-background/80 backdrop-blur-sm border-b border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <BrainCircuit className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              <span className=\"text-lg font-semibold\">Report Intelligence</span>\n            </Link>\n            <nav className=\"hidden md:flex space-x-6\">\n              <Link href=\"/\">\n                <Button\n                  variant=\"ghost\"\n                  className={location === \"/\" ? \"text-primary\" : \"text-muted-foreground hover:text-primary\"}\n                >\n                  داشبورد\n                </Button>\n              </Link>\n              <Link href=\"/analysis\">\n                <Button\n                  variant=\"ghost\"\n                  className={location === \"/analysis\" ? \"text-primary\" : \"text-muted-foreground hover:text-primary\"}\n                >\n                  آرشیو تحلیل‌ها\n                </Button>\n              </Link>\n            </nav>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative hidden md:block\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search reports...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-64 pl-10\"\n                data-testid=\"input-header-search\"\n              />\n              <Search className=\"absolute left-3 top-2.5 w-4 h-4 text-muted-foreground\" />\n            </div>\n            <Link href=\"/admin\">\n              <Button variant=\"secondary\" data-testid=\"button-admin\">\n                Admin\n              </Button>\n            </Link>\n\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden\"\n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n              data-testid=\"button-menu\"\n            >\n              {isMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden py-4 border-t border-border\">\n            <div className=\"space-y-4\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search reports...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-mobile-search\"\n              />\n              <nav className=\"space-y-2\">\n                <Link href=\"/\">\n                  <Button variant=\"ghost\" className=\"w-full justify-start\">\n                    داشبورد\n                  </Button>\n                </Link>\n              </nav>\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={DashboardPage} />\n      <Route path=\"/report/:id\" component={ReportPage} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route path=\"/analysis\" component={AnalysisPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <div className=\"min-h-screen bg-background text-foreground\">\n            <Header />\n            <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n              <Router />\n            </main>\n            <Toaster />\n          </div>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":5026},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(210, 22%, 15%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 22%, 15%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 22%, 15%);\n  --primary: hsl(214, 88%, 42%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(214, 15%, 59%);\n  --secondary-foreground: hsl(210, 20%, 30%);\n  --muted: hsl(214, 20%, 95%);\n  --muted-foreground: hsl(214, 15%, 45%);\n  --accent: hsl(158, 68%, 38%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 72%, 50%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 20%, 90%);\n  --input: hsl(214, 20%, 95%);\n  --ring: hsl(214, 88%, 42%);\n  --chart-1: hsl(214, 88%, 42%);\n  --chart-2: hsl(158, 68%, 38%);\n  --chart-3: hsl(280, 65%, 60%);\n  --chart-4: hsl(45, 85%, 55%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  --font-mono: 'JetBrains Mono', 'Fira Code', 'Consolas', monospace;\n  --radius: 8px;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(214, 88%, 52%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(158, 68%, 42%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 72%, 50%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(214, 88%, 52%);\n  --chart-1: hsl(214, 88%, 52%);\n  --chart-2: hsl(158, 68%, 42%);\n  --chart-3: hsl(280, 65%, 65%);\n  --chart-4: hsl(45, 85%, 60%);\n  --chart-5: hsl(340, 75%, 60%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: Tahoma, Arial, sans-serif;\n    direction: rtl;\n  }\n\n  /* استایل‌های بهبود یافته فارسی */\n  .upload-zone {\n    border: 3px dashed #cbd5e1;\n    text-align: center;\n    cursor: pointer;\n    transition: all 0.3s;\n    padding: 40px 20px;\n    border-radius: 16px;\n    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .upload-zone::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(45deg, transparent 30%, rgba(59, 130, 246, 0.1) 50%, transparent 70%);\n    transform: translateX(-100%);\n    transition: transform 0.6s;\n  }\n\n  .upload-zone:hover::before {\n    transform: translateX(100%);\n  }\n\n  .upload-zone:hover {\n    border-color: #3b82f6;\n    background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);\n    transform: translateY(-4px);\n    box-shadow: 0 12px 32px rgba(59, 130, 246, 0.2);\n  }\n\n  .stat-card {\n    padding: 24px;\n    border-radius: 16px;\n    text-align: center;\n    color: white;\n    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);\n    box-shadow: 0 8px 32px rgba(59, 130, 246, 0.3);\n    transition: all 0.3s;\n  }\n\n  .stat-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 12px 40px rgba(59, 130, 246, 0.4);\n  }\n\n  .action-urgent {\n    background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);\n    border: 2px solid #fecaca;\n    border-radius: 16px;\n    padding: 24px;\n    margin-bottom: 20px;\n    box-shadow: 0 4px 16px rgba(239, 68, 68, 0.1);\n  }\n\n  .action-success {\n    background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);\n    border: 2px solid #bbf7d0;\n    border-radius: 16px;\n    padding: 24px;\n    box-shadow: 0 4px 16px rgba(34, 197, 94, 0.1);\n  }\n\n  .btn {\n    background: linear-gradient(135deg, #3b82f6, #1d4ed8);\n    color: white;\n    border: none;\n    padding: 16px 32px;\n    border-radius: 16px;\n    font-size: 16px;\n    font-weight: 700;\n    cursor: pointer;\n    transition: all 0.3s;\n    margin: 8px;\n    position: relative;\n    overflow: hidden;\n    box-shadow: 0 4px 16px rgba(59, 130, 246, 0.2);\n  }\n\n  .btn::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n    transition: left 0.5s;\n  }\n\n  .btn:hover::before {\n    left: 100%;\n  }\n\n  .btn:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 12px 32px rgba(59, 130, 246, 0.4);\n    background: linear-gradient(135deg, #2563eb, #1e40af);\n  }\n\n  .btn:active {\n    transform: translateY(-1px);\n  }\n\n  /* انیمیشن‌های اضافی */\n  .card-animate {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .card-animate:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n  }\n\n  /* گرادینت پس‌زمینه */\n  .gradient-bg {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n  }\n\n  /* بهبود scrollbar */\n  .custom-scrollbar::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: #f1f5f9;\n    border-radius: 4px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: linear-gradient(135deg, #3b82f6, #1d4ed8);\n    border-radius: 4px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(135deg, #2563eb, #1e40af);\n  }\n\n  .loading {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0,0,0,0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 9999;\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .line-clamp-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n.hide-scrollbar {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n\n.hide-scrollbar::-webkit-scrollbar {\n  display: none;\n}\n","size_bytes":7129},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/lib/ai.ts":{"content":"import { AnalysisSchema } from \"@shared/analysisSchema\";\nimport { jsonSafeParse } from \"./jsonSafeParse.js\";\n\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY;\n\nexport async function analyzeDocument(corpus: string) {\n  if (!OPENAI_API_KEY || OPENAI_API_KEY.includes('your_')) {\n    console.warn(\"No valid OpenAI API key found, using sample data\");\n    return getSampleAnalysis(corpus);\n  }\n\n  try {\n    const prompt = `You are an expert business analyst. Analyze the following document and return ONLY a valid JSON response that strictly follows this schema. Do not include any prose or explanations outside the JSON.\n\nDocument to analyze:\n${corpus}\n\nReturn a JSON object with this exact structure:\n{\n  \"report_id\": \"string\",\n  \"timeframe\": {\"start\": \"YYYY-MM-DD\", \"end\": \"YYYY-MM-DD\"},\n  \"kpis\": [\n    {\"name\": \"string\", \"value\": number, \"unit\": \"string\", \"target\": number, \"delta\": number}\n  ],\n  \"trend_summary\": \"string describing trends\",\n  \"insights\": [\n    {\"type\": \"win|risk|issue|opportunity\", \"text\": \"string\"}\n  ],\n  \"score\": number (0-100),\n  \"charts\": [\n    {\n      \"title\": \"string\",\n      \"type\": \"line|bar|pie\", \n      \"series\": [{\"name\": \"string\", \"points\": [{\"x\": \"string\", \"y\": number}]}]\n    }\n  ],\n  \"next_month_plan\": {\n    \"focus_themes\": [\"string\"],\n    \"weekly_plan\": [\n      {\"week\": 1, \"goals\": [\"string\"], \"metrics\": [\"string\"], \"owner\": \"string\"},\n      {\"week\": 2, \"goals\": [\"string\"], \"metrics\": [\"string\"], \"owner\": \"string\"},\n      {\"week\": 3, \"goals\": [\"string\"], \"metrics\": [\"string\"], \"owner\": \"string\"},\n      {\"week\": 4, \"goals\": [\"string\"], \"metrics\": [\"string\"], \"owner\": \"string\"}\n    ],\n    \"milestones\": [{\"title\": \"string\", \"due\": \"YYYY-MM-DD\"}],\n    \"risks_mitigations\": [{\"risk\": \"string\", \"mitigation\": \"string\"}]\n  }\n}\n\nGenerate realistic data based on the document content. Include meaningful KPIs, actionable insights, and a comprehensive one-month plan.`;\n\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${OPENAI_API_KEY}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: \"gpt-4o-mini\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a business analyst expert. Return only valid JSON that matches the provided schema exactly.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 4000,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenAI API error: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    const rawJson = data.choices[0]?.message?.content || \"{}\";\n\n    // Parse and validate the JSON response\n    const aiJson = jsonSafeParse(rawJson);\n    \n    // Validate the parsed JSON against the schema\n    const validatedJson = AnalysisSchema.parse(aiJson);\n\n    // Generate markdown summary\n    const aiMarkdown = generateMarkdownSummary(validatedJson);\n\n    return { aiJson: validatedJson, aiMarkdown };\n  } catch (error) {\n    console.error(\"OpenAI analysis failed:\", error);\n    return getSampleAnalysis(corpus);\n  }\n}\n\nfunction generateMarkdownSummary(analysisData: any): string {\n  const score = analysisData.score || 0;\n  const kpis = analysisData.kpis || [];\n  const insights = analysisData.insights || [];\n\n  return `# خلاصه اجرایی\n\n## امتیاز عملکرد کلی: ${score}/100\n\n${analysisData.trend_summary || \"داده‌های تحلیل در دسترس نیست.\"}\n\n## شاخص‌های کلیدی عملکرد\n\n${kpis.map((kpi: any) => \n  `- **${kpi.name}**: ${kpi.value}${kpi.unit ? ` ${kpi.unit}` : ''} ${kpi.delta ? (kpi.delta >= 0 ? '↗️' : '↘️') : ''}`\n).join('\\n')}\n\n## بینش‌های کلیدی\n\n${insights.map((insight: any) => \n  `- **${insight.type?.toUpperCase()}**: ${insight.text}`\n).join('\\n')}\n\n## تمرکز ماه آینده\n\n${analysisData.next_month_plan?.focus_themes?.map((theme: string) => `- ${theme}`).join('\\n') || 'موضوعات خاصی شناسایی نشده است.'}\n\n---\n\n*این تحلیل به صورت خودکار تولید شده است. لطفاً برای بینش‌های جامع و برنامه عملیاتی، تب‌های تفصیلی را مرور کنید.ns.*`;\n}\n\nfunction getSampleAnalysis(corpus: string) {\n  const reportId = corpus.includes(\"Report Title:\") \n    ? corpus.split(\"Report Title:\")[1].split(\"\\n\")[0].trim() \n    : \"sample-report\";\n\n  const aiJson = {\n    \"report_id\": reportId,\n    \"timeframe\": { \"start\": \"2025-08-15\", \"end\": \"2025-09-15\" },\n    \"kpis\": [\n      { \"name\": \"Orders\", \"value\": 120, \"unit\": \"\", \"target\": 150, \"delta\": 15 },\n      { \"name\": \"On-time %\", \"value\": 92, \"unit\": \"%\", \"target\": 95, \"delta\": 3 },\n      { \"name\": \"Revenue\", \"value\": 42000, \"unit\": \"CAD\", \"target\": 50000, \"delta\": 8000 }\n    ],\n    \"trend_summary\": \"Growth in orders and revenue; slight gap to targets.\",\n    \"insights\": [\n      { \"type\": \"win\", \"text\": \"Same-day delivery uptake rose 18%\" },\n      { \"type\": \"risk\", \"text\": \"Driver availability on weekends is tight\" }\n    ],\n    \"score\": 82,\n    \"charts\": [\n      {\n        \"title\": \"Orders per week\",\n        \"type\": \"line\",\n        \"series\": [{\n          \"name\": \"Orders\",\n          \"points\": [\n            { \"x\": \"2025-08-18\", \"y\": 22 },\n            { \"x\": \"2025-08-25\", \"y\": 27 },\n            { \"x\": \"2025-09-01\", \"y\": 31 },\n            { \"x\": \"2025-09-08\", \"y\": 40 }\n          ]\n        }]\n      },\n      {\n        \"title\": \"Revenue\",\n        \"type\": \"bar\",\n        \"series\": [{\n          \"name\": \"CAD\",\n          \"points\": [\n            { \"x\": \"2025-08-18\", \"y\": 9000 },\n            { \"x\": \"2025-08-25\", \"y\": 10000 },\n            { \"x\": \"2025-09-01\", \"y\": 11000 },\n            { \"x\": \"2025-09-08\", \"y\": 12000 }\n          ]\n        }]\n      }\n    ],\n    \"next_month_plan\": {\n      \"focus_themes\": [\"On-time rate\", \"B2B partnerships\", \"Cost per delivery\"],\n      \"weekly_plan\": [\n        { \"week\": 1, \"goals\": [\"Audit late routes\", \"Pilot SMS ETA\"], \"metrics\": [\"late%\", \"ETA open%\"], \"owner\": \"Ops\" },\n        { \"week\": 2, \"goals\": [\"Sign 2 partners\", \"Bundle pricing\"], \"metrics\": [\"partners\", \"ARPU\"], \"owner\": \"Sales\" },\n        { \"week\": 3, \"goals\": [\"Optimize dispatch\"], \"metrics\": [\"cost/stop\", \"utilization%\"], \"owner\": \"Ops\" },\n        { \"week\": 4, \"goals\": [\"Review targets\", \"QBR deck\"], \"metrics\": [\"score\", \"target gap\"], \"owner\": \"Exec\" }\n      ],\n      \"milestones\": [{ \"title\": \"2 B2B contracts\", \"due\": \"2025-10-10\" }],\n      \"risks_mitigations\": [{ \"risk\": \"Weekend capacity\", \"mitigation\": \"Hire 2 PT drivers\" }]\n    }\n  };\n\n  const aiMarkdown = generateMarkdownSummary(aiJson);\n\n  return { aiJson, aiMarkdown };\n}","size_bytes":6784},"server/lib/auth.ts":{"content":"import jwt from \"jsonwebtoken\";\nimport type { Request, Response, NextFunction } from \"express\";\nimport type { AdminUser, PublicUser } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || process.env.SESSION_SECRET;\nif (!JWT_SECRET) {\n  throw new Error(\"JWT_SECRET or SESSION_SECRET environment variable is required for secure authentication\");\n}\nconst ADMIN_PASSWORD = process.env.ADMIN_PASSWORD;\nif (!ADMIN_PASSWORD) {\n  throw new Error(\"ADMIN_PASSWORD environment variable is required for secure authentication\");\n}\n\nexport interface AuthenticatedRequest extends Request {\n  user?: AdminUser | PublicUser;\n}\n\nexport function signToken(payload: AdminUser): string {\n  return jwt.sign(payload, JWT_SECRET!, { expiresIn: \"24h\" });\n}\n\nexport function verifyToken(token: string): AdminUser | null {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET!) as any;\n    if (decoded.role === \"admin\") {\n      return decoded as AdminUser;\n    }\n    return null;\n  } catch {\n    return null;\n  }\n}\n\nexport function requireAdmin(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  try {\n    const token = req.cookies?.ri_admin;\n    if (!token) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    const user = verifyToken(token);\n    if (!user || user.role !== \"admin\") {\n      return res.status(401).json({ message: \"Admin access required\" });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    res.status(401).json({ message: \"Invalid authentication\" });\n  }\n}\n\nexport function getUser(req: AuthenticatedRequest): AdminUser | PublicUser {\n  try {\n    const token = req.cookies?.ri_admin;\n    if (!token) {\n      return { role: \"public\" };\n    }\n\n    const user = verifyToken(token);\n    return user || { role: \"public\" };\n  } catch {\n    return { role: \"public\" };\n  }\n}\n\nexport function verifyPassword(password: string): boolean {\n  return password === ADMIN_PASSWORD;\n}\n","size_bytes":1945},"server/lib/extractors.ts":{"content":"import { JSDOM } from \"jsdom\";\nimport cheerio from 'cheerio';\n// analyzeImage function will be implemented separately\n\n// Lazy import pdf-parse to avoid startup issues\nlet pdfParse: any = null;\nasync function getPdfParse() {\n  if (!pdfParse) {\n    try {\n      const pdfModule = await import(\"pdf-parse\");\n      pdfParse = pdfModule.default;\n    } catch (error) {\n      console.warn(\"pdf-parse not available:\", error);\n      pdfParse = null;\n    }\n  }\n  return pdfParse;\n}\n\nexport async function extractText(file: Express.Multer.File): Promise<string> {\n  if (!file.buffer) {\n    throw new Error(\"No file buffer available\");\n  }\n\n  const mimeType = file.mimetype;\n  const fileName = file.originalname.toLowerCase();\n\n  try {\n    if (mimeType === \"text/html\" || fileName.endsWith(\".html\")) {\n      const html = file.buffer.toString(\"utf-8\");\n\n      // Remove script and style tags completely\n      const cleanHtml = html\n        .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n        .replace(/<style\\b[^<]*(?:(?!<\\/style>)<[^<]*)*<\\/style>/gi, '');\n\n      // Parse HTML and extract text\n      const $ = cheerio.load(cleanHtml);\n\n      // Remove unwanted elements\n      $('script, style, nav, header, footer, aside, .sidebar, .menu, .navigation').remove();\n\n      // Extract structured data\n      const extractedData = {\n        title: $('title').text() || $('h1').first().text(),\n        tables: extractTablesData($),\n        lists: extractListsData($),\n        paragraphs: extractParagraphsData($),\n        numbers: extractNumbersData($),\n        dates: extractDatesData($)\n      };\n\n      // Get text content and clean it up\n      let text = $.text();\n\n      // Clean up whitespace and normalize\n      text = text\n        .replace(/\\s+/g, ' ')\n        .replace(/\\n\\s*\\n/g, '\\n')\n        .trim();\n\n      // Enhance with structured data\n      let enhancedText = text;\n\n      if (extractedData.title) {\n        enhancedText = `عنوان: ${extractedData.title}\\n\\n${enhancedText}`;\n      }\n\n      if (extractedData.tables.length > 0) {\n        enhancedText += '\\n\\nداده‌های جدول:\\n' + extractedData.tables.join('\\n');\n      }\n\n      if (extractedData.numbers.length > 0) {\n        enhancedText += '\\n\\nاعداد مهم: ' + extractedData.numbers.join(', ');\n      }\n\n      if (extractedData.dates.length > 0) {\n        enhancedText += '\\n\\nتاریخ‌ها: ' + extractedData.dates.join(', ');\n      }\n\n      if (!enhancedText || enhancedText.length < 10) {\n        return \"محتوای متنی قابل تحلیل در فایل HTML یافت نشد.\";\n      }\n\n      return enhancedText;\n    }\n\n    // Handle other file types here if needed\n    throw new Error(`نوع فایل پشتیبانی نمی‌شود: ${mimeType}`);\n\n  } catch (error) {\n    console.error(`استخراج متن برای ${file.originalname} ناموفق بود:`, error);\n    return `استخراج متن برای فایل ناموفق بود: ${file.originalname}`;\n  }\n}\n\nfunction extractTablesData($: any): string[] {\n  const tables: string[] = [];\n  $('table').each((i: number, table: any) => {\n    const rows: string[] = [];\n    $(table).find('tr').each((j: number, row: any) => {\n      const cells = $(row).find('td, th').map((k: number, cell: any) => $(cell).text().trim()).get();\n      if (cells.length > 0) {\n        rows.push(cells.join(' | '));\n      }\n    });\n    if (rows.length > 0) {\n      tables.push(rows.join('\\n'));\n    }\n  });\n  return tables;\n}\n\nfunction extractListsData($: any): string[] {\n  const lists: string[] = [];\n  $('ul, ol').each((i: number, list: any) => {\n    const items = $(list).find('li').map((j: number, item: any) => $(item).text().trim()).get();\n    if (items.length > 0) {\n      lists.push(items.join(', '));\n    }\n  });\n  return lists;\n}\n\nfunction extractParagraphsData($: any): string[] {\n  const paragraphs: string[] = [];\n  $('p').each((i: number, p: any) => {\n    const text = $(p).text().trim();\n    if (text && text.length > 20) {\n      paragraphs.push(text);\n    }\n  });\n  return paragraphs;\n}\n\nfunction extractNumbersData($: any): string[] {\n  const text = $.text();\n  const numbers = text.match(/\\d+(?:\\.\\d+)?(?:%|درصد|تومان|ریال|دلار|\\$|€|£)?/g) || [];\n  return [...new Set(numbers)]; // Remove duplicates\n}\n\nfunction extractDatesData($: any): string[] {\n  const text = $.text();\n  const dates = text.match(/\\d{4}[-\\/]\\d{1,2}[-\\/]\\d{1,2}|\\d{1,2}[-\\/]\\d{1,2}[-\\/]\\d{4}|\\d{1,2}\\s+(ژانویه|فوریه|مارس|آوریل|مه|ژوئن|ژوئیه|اوت|سپتامبر|اکتبر|نوامبر|دسامبر|\\u06A9\\u0647|\\u0622\\u0628\\u0627\\u0646|\\u0622\\u0630\\u0631|\\u062F\\u06CC|\\u0628\\u0647\\u0645\\u0646|\\u0627\\u0633\\u0641\\u0646\\u062F|\\u0641\\u0631\\u0648\\u0631\\u062F\\u06CC\\u0646|\\u0627\\u0631\\u062F\\u06CC\\u0628\\u0647\\u0634\\u062A|\\u062E\\u0631\\u062F\\u0627\\u062F|\\u062A\\u06CC\\u0631|\\u0645\\u0631\\u062F\\u0627\\u062F|\\u0634\\u0647\\u0631\\u06CC\\u0648\\u0631|\\u0645\\u0647\\u0631)\\s+\\d{4}/g) || [];\n  return [...new Set(dates)]; // Remove duplicates\n}","size_bytes":5022},"server/lib/jsonSafeParse.ts":{"content":"export function jsonSafeParse(jsonString: string): any {\n  try {\n    return JSON.parse(jsonString);\n  } catch (error) {\n    // Attempt to repair common JSON issues\n    let repaired = jsonString.trim();\n    \n    // Remove potential markdown code block markers\n    repaired = repaired.replace(/^```json\\s*/, '').replace(/\\s*```$/, '');\n    \n    // Fix trailing commas\n    repaired = repaired.replace(/,(\\s*[}\\]])/g, '$1');\n    \n    // Fix missing quotes around keys\n    repaired = repaired.replace(/([{,]\\s*)([a-zA-Z_][a-zA-Z0-9_]*)\\s*:/g, '$1\"$2\":');\n    \n    // Try parsing again\n    try {\n      return JSON.parse(repaired);\n    } catch (secondError) {\n      console.error(\"JSON parsing failed even after repair attempts:\", secondError);\n      console.error(\"Original string:\", jsonString);\n      console.error(\"Repaired string:\", repaired);\n      throw new Error(\"Failed to parse JSON response from AI\");\n    }\n  }\n}\n","size_bytes":918},"server/lib/storage.ts":{"content":"import { createClient } from \"@supabase/supabase-js\";\nimport type { FileItem } from \"@shared/schema\";\n\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nlet supabase: any = null;\n\nif (supabaseUrl && supabaseServiceKey) {\n  supabase = createClient(supabaseUrl, supabaseServiceKey);\n}\n\nexport async function uploadFile(\n  file: Express.Multer.File,\n  reportId: number\n): Promise<FileItem> {\n  if (!supabase) {\n    throw new Error(\"Supabase not configured\");\n  }\n  \n  const fileName = `${reportId}/${Date.now()}-${file.originalname}`;\n  \n  const { data, error } = await supabase.storage\n    .from(\"reports_files\")\n    .upload(fileName, file.buffer, {\n      contentType: file.mimetype,\n      upsert: false\n    });\n\n  if (error) {\n    throw new Error(`Upload failed: ${error.message}`);\n  }\n\n  const { data: { publicUrl } } = supabase.storage\n    .from(\"reports_files\")\n    .getPublicUrl(data.path);\n\n  const fileType = getFileType(file.mimetype);\n  \n  return {\n    type: fileType,\n    url: publicUrl,\n    file_name: file.originalname,\n    size_kb: Math.round(file.size / 1024)\n  };\n}\n\nexport async function deleteFile(url: string): Promise<void> {\n  if (!supabase) {\n    return; // Silently ignore if Supabase not configured\n  }\n  \n  const path = extractPathFromUrl(url);\n  if (!path) return;\n\n  const { error } = await supabase.storage\n    .from(\"reports_files\")\n    .remove([path]);\n\n  if (error) {\n    console.error(`Failed to delete file: ${error.message}`);\n  }\n}\n\nfunction getFileType(mimetype: string): \"html\" | \"pdf\" | \"image\" {\n  if (mimetype === \"text/html\") return \"html\";\n  if (mimetype === \"application/pdf\") return \"pdf\";\n  if (mimetype.startsWith(\"image/\")) return \"image\";\n  throw new Error(`Unsupported file type: ${mimetype}`);\n}\n\nfunction extractPathFromUrl(url: string): string | null {\n  try {\n    const urlObj = new URL(url);\n    const pathMatch = urlObj.pathname.match(/\\/object\\/public\\/reports_files\\/(.+)$/);\n    return pathMatch ? pathMatch[1] : null;\n  } catch {\n    return null;\n  }\n}\n","size_bytes":2078},"server/lib/supabase.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { reports } from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nexport const db = drizzle(sql, { schema: { reports } });\n","size_bytes":346},"client/src/components/AdminLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ShieldCheck } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { login } from \"@/lib/api\";\n\nexport function AdminLogin() {\n  const [password, setPassword] = useState(\"\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const loginMutation = useMutation({\n    mutationFn: login,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      toast({\n        title: \"موفقیت\",\n        description: \"با موفقیت وارد شدید\",\n      });\n      setLocation(\"/admin\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"ورود ناموفق\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!password.trim()) {\n      toast({\n        title: \"خطا\",\n        description: \"لطفا رمز عبور را وارد کنید\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    loginMutation.mutate(password);\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-20\" data-testid=\"admin-login\">\n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 bg-primary rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <ShieldCheck className=\"w-8 h-8 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-2xl font-bold\">ورود مدیر</h1>\n            <p className=\"text-muted-foreground mt-2\">برای ادامه، اطلاعات مدیر خود را وارد کنید</p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"password\">رمز عبور</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"رمز عبور مدیر را وارد کنید\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? \"در حال ورود...\" : \"ورود\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <Button \n              variant=\"ghost\" \n              onClick={() => setLocation(\"/\")}\n              data-testid=\"button-back-dashboard\"\n            >\n              ← بازگشت به داشبورد\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3222},"client/src/components/AdminPanel.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { FileUploader } from \"./FileUploader\";\nimport { LogOut, Eye, Brain, Globe, Trash2, FileText, Image, Upload, Calendar, Star, TrendingUp } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { logout, getAdminReports, analyzeReport, publishReport, deleteReport, invalidateReports } from \"@/lib/api\";\nimport type { Report } from \"@shared/schema\";\n\nexport function AdminPanel() {\n  const [activeTab, setActiveTab] = useState(\"upload\");\n  const [selectedReports, setSelectedReports] = useState<number[]>([]);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: reports = [], isLoading } = useQuery({\n    queryKey: [\"/api/admin/reports\"],\n    queryFn: getAdminReports\n  }) as { data: Report[], isLoading: boolean };\n\n  const logoutMutation = useMutation({\n    mutationFn: logout,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      toast({\n        title: \"موفقیت\",\n        description: \"با موفقیت خارج شدید\",\n      });\n      setLocation(\"/\");\n    }\n  });\n\n  const analyzeMutation = useMutation({\n    mutationFn: analyzeReport,\n    onSuccess: () => {\n      invalidateReports();\n      toast({\n        title: \"موفقیت\",\n        description: \"گزارش با موفقیت تحلیل شد\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"تحلیل ناموفق\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const publishMutation = useMutation({\n    mutationFn: publishReport,\n    onSuccess: () => {\n      invalidateReports();\n      toast({\n        title: \"موفقیت\",\n        description: \"گزارش با موفقیت منتشر شد\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"انتشار ناموفق\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: deleteReport,\n    onSuccess: () => {\n      invalidateReports();\n      toast({\n        title: \"موفقیت\",\n        description: \"گزارش با موفقیت حذف شد\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"حذف ناموفق\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleUploadComplete = (reportId: number) => {\n    invalidateReports();\n    setActiveTab(\"manage\");\n    toast({\n      title: \"آپلود کامل شد\",\n      description: \"گزارش با موفقیت آپلود شد. اکنون می‌توانید آن را تحلیل کنید.\",\n    });\n  };\n\n  const handleAnalyze = (reportId: number) => {\n    analyzeMutation.mutate(reportId.toString());\n  };\n\n  const handlePublish = (reportId: number) => {\n    publishMutation.mutate(reportId.toString());\n  };\n\n  const handleDelete = (reportId: number) => {\n    if (confirm(\"آیا مطمئن هستید که می‌خواهید این گزارش را حذف کنید؟ این عمل قابل بازگشت نیست.\")) {\n      deleteMutation.mutate(reportId.toString());\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"published\":\n        return <Badge className=\"bg-accent/10 text-accent\">منتشر شده</Badge>;\n      case \"analyzed\":\n        return <Badge className=\"bg-chart-2/10 text-chart-2\">تحلیل شده</Badge>;\n      case \"uploaded\":\n        return <Badge variant=\"outline\">بارگذاری شده</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getFileIcon = (files: any[]) => {\n    if (!files || files.length === 0) return <FileText className=\"w-4 h-4 text-primary\" />;\n    const type = files[0].type;\n    switch (type) {\n      case \"html\": return <Globe className=\"w-4 h-4 text-chart-2\" />;\n      case \"image\": return <Image className=\"w-4 h-4 text-chart-3\" />;\n      default: return <FileText className=\"w-4 h-4 text-primary\" />;\n    }\n  };\n\n  const filteredReports = reports.filter((report: Report) => \n    statusFilter === \"all\" || report.status === statusFilter\n  );\n\n  const stats = {\n    totalUploads: reports.length,\n    aiProcessed: reports.filter((r: Report) => r.status === \"analyzed\" || r.status === \"published\").length,\n    published: reports.filter((r: Report) => r.status === \"published\").length,\n    avgScore: reports.length > 0 ? \n      (reports\n        .filter((r: Report) => r.score)\n        .reduce((sum: number, r: Report) => sum + parseFloat(r.score || \"0\"), 0) / \n       reports.filter((r: Report) => r.score).length || 1).toFixed(1) : \"0\"\n  };\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"admin-panel\">\n      {/* Admin Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">پنل مدیریت</h1>\n          <p className=\"text-muted-foreground mt-2\">گزارش‌ها را مدیریت کنید، فایل‌های جدید آپلود کنید و انتشار را کنترل کنید</p>\n        </div>\n        <Button \n          variant=\"destructive\" \n          onClick={handleLogout}\n          disabled={logoutMutation.isPending}\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          {logoutMutation.isPending ? \"در حال خروج...\" : \"خروج\"}\n        </Button>\n      </div>\n\n      {/* Admin Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"upload\" data-testid=\"tab-upload\">آپلود</TabsTrigger>\n          <TabsTrigger value=\"manage\" data-testid=\"tab-manage\">مدیریت گزارش‌ها</TabsTrigger>\n          <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">تحلیل‌ها</TabsTrigger>\n        </TabsList>\n\n        {/* Upload Tab */}\n        <TabsContent value=\"upload\" className=\"space-y-8\">\n          <FileUploader onUploadComplete={handleUploadComplete} />\n        </TabsContent>\n\n        {/* Manage Reports Tab */}\n        <TabsContent value=\"manage\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">همه گزارش‌ها</h2>\n            <div className=\"flex items-center space-x-3\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"فیلتر بر اساس وضعیت...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">همه وضعیت‌ها</SelectItem>\n                  <SelectItem value=\"uploaded\">بارگذاری شده</SelectItem>\n                  <SelectItem value=\"analyzed\">تحلیل شده</SelectItem>\n                  <SelectItem value=\"published\">منتشر شده</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Reports Table */}\n          <Card>\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"p-8 text-center\">\n                  <p className=\"text-muted-foreground\">در حال بارگیری گزارش‌ها...</p>\n                </div>\n              ) : filteredReports.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-12\">\n                        <Checkbox />\n                      </TableHead>\n                      <TableHead>گزارش</TableHead>\n                      <TableHead>وضعیت</TableHead>\n                      <TableHead>امتیاز</TableHead>\n                      <TableHead>تاریخ</TableHead>\n                      <TableHead>عملیات</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredReports.map((report: Report) => (\n                      <TableRow key={report.id} data-testid={`row-report-${report.id}`}>\n                        <TableCell>\n                          <Checkbox />\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n                              {getFileIcon(report.files || [])}\n                            </div>\n                            <div>\n                              <h4 className=\"font-medium text-sm\">{report.title}</h4>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {report.files?.length || 0} فایل • {Math.round(parseFloat(report.size_kb) / 1024 * 10) / 10} مگابایت\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(report.status)}\n                        </TableCell>\n                        <TableCell>\n                          {report.score ? (\n                            <div className=\"flex items-center space-x-1\">\n                              <span className=\"font-medium\">{parseFloat(report.score).toFixed(1)}</span>\n                              <Star className=\"w-3 h-3 text-accent fill-current\" />\n                            </div>\n                          ) : (\n                            <span className=\"text-muted-foreground\">-</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm text-muted-foreground\">\n                            {new Date(report.upload_date).toLocaleDateString()}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              onClick={() => window.open(`/report/${report.id}`, '_blank')}\n                              data-testid={`button-view-${report.id}`}\n                            >\n                              <Eye className=\"w-4 h-4\" />\n                              مشاهده\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => handleAnalyze(report.id)}\n                              disabled={analyzeMutation.isPending}\n                              data-testid={`button-analyze-${report.id}`}\n                            >\n                              <Brain className=\"w-4 h-4\" />\n                              تحلیل\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => handlePublish(report.id)}\n                              disabled={report.status !== \"analyzed\" || publishMutation.isPending}\n                              data-testid={`button-publish-${report.id}`}\n                            >\n                              <Globe className=\"w-4 h-4\" />\n                              انتشار\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => handleDelete(report.id)}\n                              disabled={deleteMutation.isPending}\n                              className=\"text-destructive hover:text-destructive\"\n                              data-testid={`button-delete-${report.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                              حذف\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"p-8 text-center\">\n                  <p className=\"text-muted-foreground\">\n                    {statusFilter === \"all\" ? \"هیچ گزارشی یافت نشد.\" : `هیچ گزارش ${statusFilter}ی یافت نشد.`}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Analytics Tab */}\n        <TabsContent value=\"analytics\" className=\"space-y-8\">\n          <h2 className=\"text-xl font-semibold\">تحلیل‌های سیستم</h2>\n\n          {/* Analytics Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">کل آپلودها</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-uploads\">\n                      {stats.totalUploads}\n                    </p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <Upload className=\"w-5 h-5 text-primary\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">پردازش شده با هوش مصنوعی</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-ai-processed\">\n                      {stats.aiProcessed}\n                    </p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                    <Brain className=\"w-5 h-5 text-chart-2\" />\n                  </div>\n                </div>\n                <p className=\"text-xs text-chart-2 mt-2\">\n                  {reports.length > 0 ? Math.round((stats.aiProcessed / reports.length) * 100) : 0}% نرخ موفقیت\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">منتشر شده</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-published\">\n                      {stats.published}\n                    </p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                    <Globe className=\"w-5 h-5 text-accent\" />\n                  </div>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  {reports.length > 0 ? Math.round((stats.published / reports.length) * 100) : 0}% از کل\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">میانگین امتیاز</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-avg-score\">\n                      {stats.avgScore}\n                    </p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-chart-4/10 rounded-lg flex items-center justify-center\">\n                    <Star className=\"w-5 h-5 text-chart-4\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":17267},"client/src/components/ChartsBoard.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { AnalysisData } from '@shared/analysisSchema';\n\ninterface ChartsBoardProps {\n  data: AnalysisData;\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\nexport default function ChartsBoard({ data }: ChartsBoardProps) {\n  if (!data.charts || data.charts.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <p className=\"text-muted-foreground\">داده‌های نمودار در دسترس نیست. لطفاً ابتدا گزارش را تحلیل کنید.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const renderChart = (chart: AnalysisData['charts'][0], index: number) => {\n    const chartData = chart.series[0]?.points.map(basePoint => ({\n      name: basePoint.x,\n      value: basePoint.y,\n      ...Object.fromEntries(chart.series.map(series => [\n        series.name, \n        series.points.find(p => p.x === basePoint.x)?.y ?? 0\n      ]))\n    })) || [];\n\n    switch (chart.type) {\n      case 'line':\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              {chart.series.map((series, seriesIndex) => (\n                <Line \n                  key={seriesIndex}\n                  type=\"monotone\" \n                  dataKey={series.name} \n                  stroke={COLORS[seriesIndex % COLORS.length]}\n                  strokeWidth={2}\n                />\n              ))}\n            </LineChart>\n          </ResponsiveContainer>\n        );\n\n      case 'bar':\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              {chart.series.map((series, seriesIndex) => (\n                <Bar \n                  key={seriesIndex}\n                  dataKey={series.name} \n                  fill={COLORS[seriesIndex % COLORS.length]}\n                />\n              ))}\n            </BarChart>\n          </ResponsiveContainer>\n        );\n\n      case 'pie':\n        const pieData = chart.series[0]?.points.map((point, pointIndex) => ({\n          name: point.x,\n          value: point.y,\n          fill: COLORS[pointIndex % COLORS.length]\n        })) || [];\n\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={pieData}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n              >\n                {pieData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.fill} />\n                ))}\n              </Pie>\n              <Tooltip />\n            </PieChart>\n          </ResponsiveContainer>\n        );\n\n      default:\n        return <div>Unsupported chart type: {chart.type}</div>;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {data.charts.map((chart, index) => (\n        <Card key={index}>\n          <CardHeader>\n            <CardTitle>{chart.title}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {renderChart(chart, index)}\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3893},"client/src/components/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ReportCard } from \"./ReportCard\";\nimport { Search, SortDesc, FileText, TrendingUp, Calendar, Brain } from \"lucide-react\";\nimport { getPublishedReports } from \"@/lib/api\";\nimport type { Report } from \"@shared/schema\";\n\nexport function Dashboard() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"recent\");\n  const [filterBy, setFilterBy] = useState(\"all\");\n\n  const { data: reports = [], isLoading, error } = useQuery({\n    queryKey: [\"/api/list\"],\n    queryFn: getPublishedReports\n  });\n\n  const filteredReports = reports.filter((report: Report) => {\n    const matchesSearch = report.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         (report.ai_markdown && report.ai_markdown.toLowerCase().includes(searchQuery.toLowerCase()));\n\n    const matchesFilter = filterBy === \"all\" ||\n                         (filterBy === \"high-score\" && report.score && parseFloat(report.score) >= 80) ||\n                         (filterBy === \"recent\" && new Date(report.upload_date) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000));\n\n    return matchesSearch && matchesFilter;\n  });\n\n  const sortedReports = [...filteredReports].sort((a, b) => {\n    switch (sortBy) {\n      case \"score\":\n        return (parseFloat(b.score || \"0\") - parseFloat(a.score || \"0\"));\n      case \"title\":\n        return a.title.localeCompare(b.title);\n      default: // \"recent\"\n        return new Date(b.upload_date).getTime() - new Date(a.upload_date).getTime();\n    }\n  });\n\n  const stats = {\n    totalReports: reports.length,\n    avgScore: reports.length > 0 ?\n      (reports.reduce((sum: number, r: Report) => sum + parseFloat(r.score || \"0\"), 0) / reports.length).toFixed(1) : \"0\",\n    thisMonth: reports.filter((r: Report) =>\n      new Date(r.upload_date).getMonth() === new Date().getMonth()\n    ).length,\n    aiStatus: \"Active\"\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Published Reports</h1>\n            <p className=\"text-muted-foreground mt-2\">AI-analyzed intelligence reports from our research team</p>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-20 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-48 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-destructive\">Failed to load reports. Please try again.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"dashboard\">\n      {/* Dashboard Header */}\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">داشبورد گزارش‌های هوشمند</h1>\n          <p className=\"text-muted-foreground mt-2\">گزارش‌های تحلیل شده با هوش مصنوعی از تیم تحقیقات ما</p>\n        </div>\n\n        {/* Filters & Search */}\n        <div className=\"flex flex-wrap items-center gap-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-2.5 w-4 h-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"جستجو در گزارش‌ها...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 w-64\"\n              data-testid=\"input-search\"\n            />\n          </div>\n          <Select value={filterBy} onValueChange={setFilterBy}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-filter\">\n              <SelectValue placeholder=\"فیلتر بر اساس...\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">همه گزارش‌ها</SelectItem>\n              <SelectItem value=\"high-score\">امتیاز بالا (80+)</SelectItem>\n              <SelectItem value=\"recent\">اخیر (7 روز)</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={sortBy} onValueChange={setSortBy}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-sort\">\n              <SelectValue placeholder=\"مرتب‌سازی بر اساس...\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"recent\">جدیدترین</SelectItem>\n              <SelectItem value=\"score\">امتیاز</SelectItem>\n              <SelectItem value=\"title\">عنوان</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">کل گزارش‌ها</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-reports\">\n                  {stats.totalReports}\n                </p>\n              </div>\n              <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <FileText className=\"w-5 h-5 text-primary\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">میانگین امتیاز</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-avg-score\">\n                  {stats.avgScore}\n                </p>\n              </div>\n              <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"w-5 h-5 text-accent\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">این ماه</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-this-month\">\n                  {stats.thisMonth}\n                </p>\n              </div>\n              <div className=\"w-10 h-10 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n                <Calendar className=\"w-5 h-5 text-chart-3\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">تحلیل هوش مصنوعی</p>\n                <p className=\"text-2xl font-bold text-accent\" data-testid=\"stat-ai-status\">\n                  فعال\n                </p>\n              </div>\n              <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                <Brain className=\"w-5 h-5 text-accent\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Reports Grid */}\n      {sortedReports.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"reports-grid\">\n          {sortedReports.map((report: Report) => (\n            <ReportCard key={report.id} report={report} />\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">\n            {searchQuery || filterBy !== \"all\"\n              ? \"هیچ گزارشی با معیارهای جستجوی شما یافت نشد.\"\n              : \"هیچ گزارش منتشر شده‌ای در دسترس نیست.\"}\n          </p>\n        </div>\n      )}\n\n      {/* Load More Button - for future pagination */}\n      {sortedReports.length > 9 && (\n        <div className=\"flex justify-center pt-8\">\n          <Button variant=\"outline\" data-testid=\"button-load-more\">\n            نمایش گزارش‌های بیشتر\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9407},"client/src/components/FileUploader.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Upload, FileText, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { uploadFiles } from \"@/lib/api\";\n\ninterface FileUploaderProps {\n  onUploadComplete?: (reportId: number) => void;\n}\n\nexport function FileUploader({ onUploadComplete }: FileUploaderProps) {\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [autoAnalyze, setAutoAnalyze] = useState(true);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const { toast } = useToast();\n\n  const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    setSelectedFiles(prev => [...prev, ...files]);\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    const files = Array.from(e.dataTransfer.files);\n    setSelectedFiles(prev => [...prev, ...files]);\n  }, []);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n  }, []);\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!title.trim()) {\n      toast({\n        title: \"خطا\",\n        description: \"لطفاً عنوانی برای گزارش وارد کنید\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (selectedFiles.length === 0) {\n      toast({\n        title: \"خطا\", \n        description: \"لطفاً حداقل یک فایل برای آپلود انتخاب کنید\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    setUploadProgress(0);\n\n    try {\n      // Simulate progress\n      const progressInterval = setInterval(() => {\n        setUploadProgress(prev => Math.min(prev + 10, 90));\n      }, 200);\n\n      const fileList = new DataTransfer();\n      selectedFiles.forEach(file => fileList.items.add(file));\n\n      const result = await uploadFiles(title, fileList.files);\n\n      clearInterval(progressInterval);\n      setUploadProgress(100);\n\n      toast({\n        title: \"موفقیت\",\n        description: \"فایل‌ها با موفقیت آپلود شدند\",\n      });\n\n      // Reset form\n      setSelectedFiles([]);\n      setTitle(\"\");\n      setDescription(\"\");\n\n      onUploadComplete?.(result.reportId);\n    } catch (error) {\n      toast({\n        title: \"آپلود ناموفق\",\n        description: error instanceof Error ? error.message : \"آپلود با شکست مواجه شد\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-8\">\n        <h2 className=\"text-xl font-semibold mb-6\">آپلود گزارش</h2>\n\n        {/* File Upload Area */}\n        <div \n          className=\"border-2 border-dashed border-border rounded-lg p-12 text-center hover:border-primary/50 transition-colors mb-6\"\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          data-testid=\"upload-dropzone\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-lg flex items-center justify-center mx-auto\">\n              <Upload className=\"w-8 h-8 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-medium\">فایل‌ها را اینجا بکشید یا کلیک کنید</h3>\n              <p className=\"text-muted-foreground\">فقط فایل‌های HTML پذیرفته می‌شوند</p>\n              <p className=\"text-sm text-muted-foreground\">حداکثر اندازه فایل: ۲۰ مگابایت برای هر فایل</p>\n            </div>\n            <Button asChild>\n              <label>\n                انتخاب فایل‌ها\n                <input\n                  type=\"file\"\n                  multiple\n                  accept=\".html,.htm\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                  data-testid=\"input-file-select\"\n                />\n              </label>\n            </Button>\n          </div>\n        </div>\n\n        {/* Selected Files */}\n        {selectedFiles.length > 0 && (\n          <div className=\"space-y-4 mb-6\">\n            <h3 className=\"font-medium\">فایل‌های انتخاب شده</h3>\n            <div className=\"space-y-3\">\n              {selectedFiles.map((file, index) => (\n                <div \n                  key={index} \n                  className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\"\n                  data-testid={`file-item-${index}`}\n                >\n                  <FileText className=\"w-5 h-5 text-muted-foreground\" />\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium\">{file.name}</span>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {formatFileSize(file.size)}\n                      </span>\n                    </div>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => removeFile(index)}\n                    data-testid={`button-remove-file-${index}`}\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Upload Progress */}\n        {isUploading && (\n          <div className=\"space-y-4 mb-6\" data-testid=\"upload-progress\">\n            <h3 className=\"font-medium\">در حال آپلود فایل‌ها</h3>\n            <Progress value={uploadProgress} className=\"w-full\" />\n            <p className=\"text-sm text-muted-foreground\">{uploadProgress}% complete</p>\n          </div>\n        )}\n\n        {/* Report Form */}\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"title\">عنوان گزارش</Label>\n            <Input\n              id=\"title\"\n              type=\"text\"\n              placeholder=\"عنوان گزارش\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              required\n              data-testid=\"input-title\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\">توضیحات (اختیاری)</Label>\n            <Textarea\n              id=\"description\"\n              rows={3}\n              placeholder=\"توضیح مختصر گزارش...\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              data-testid=\"textarea-description\"\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"autoAnalyze\"\n                checked={autoAnalyze}\n                onCheckedChange={(checked) => setAutoAnalyze(checked === true)}\n                data-testid=\"checkbox-auto-analyze\"\n              />\n              <Label htmlFor=\"autoAnalyze\">تحلیل خودکار پس از آپلود</Label>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              <Button type=\"button\" variant=\"secondary\">\n                ذخیره پیش‌نویس\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isUploading}\n                data-testid=\"button-upload\"\n              >\n                {isUploading ? \"در حال آپلود...\" : \"آپلود و تحلیل\"}\n              </Button>\n            </div>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8759},"client/src/components/ReportCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, Clock, ArrowRight, FileText, Image, Globe } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Report } from \"@shared/schema\";\n\ninterface ReportCardProps {\n  report: Report;\n}\n\nexport function ReportCard({ report }: ReportCardProps) {\n  const fileCount = report.files?.length || 0;\n  const primaryFileType = report.files?.[0]?.type || \"pdf\";\n  \n  const getFileIcon = (type: string) => {\n    switch (type) {\n      case \"html\": return <Globe className=\"w-4 h-4\" />;\n      case \"image\": return <Image className=\"w-4 h-4\" />;\n      default: return <FileText className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"published\": return \"bg-accent/10 text-accent\";\n      case \"analyzed\": return \"bg-chart-2/10 text-chart-2\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString(\"fa-IR\", {\n      month: \"short\",\n      day: \"numeric\",\n      year: \"numeric\"\n    });\n  };\n\n  const calculateReadTime = (sizeKb: string) => {\n    const kb = parseInt(sizeKb);\n    const minutes = Math.max(1, Math.round(kb / 200)); // Rough estimate\n    return `${minutes} دقیقه مطالعه`;\n  };\n\n  return (\n    <Link href={`/report/${report.id}`}>\n      <Card \n        className=\"cursor-pointer hover:shadow-lg transition-shadow duration-300\"\n        data-testid={`card-report-${report.id}`}\n      >\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-start justify-between mb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n                {getFileIcon(primaryFileType)}\n              </div>\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {primaryFileType.toUpperCase()}\n              </Badge>\n            </div>\n            {report.score && (\n              <div className=\"flex items-center space-x-1\">\n                <span \n                  className=\"text-lg font-bold text-accent\"\n                  data-testid={`text-score-${report.id}`}\n                >\n                  {parseFloat(report.score).toFixed(1)}\n                </span>\n                <Star className=\"w-4 h-4 text-accent fill-current\" />\n              </div>\n            )}\n          </div>\n          \n          <h3 \n            className=\"text-lg font-semibold text-foreground mb-2 line-clamp-2\"\n            data-testid={`text-title-${report.id}`}\n          >\n            {report.title}\n          </h3>\n          \n          {report.ai_markdown && (\n            <p \n              className=\"text-sm text-muted-foreground mb-4 line-clamp-3\"\n              data-testid={`text-summary-${report.id}`}\n            >\n              {report.ai_markdown.split('\\n')[0].slice(0, 150)}...\n            </p>\n          )}\n          \n          <div className=\"flex items-center justify-between text-xs text-muted-foreground mb-4\">\n            <span data-testid={`text-date-${report.id}`}>\n              {formatDate(report.upload_date)}\n            </span>\n            <span className=\"flex items-center space-x-1\">\n              <Clock className=\"w-3 h-3\" />\n              <span data-testid={`text-readtime-${report.id}`}>\n                {calculateReadTime(report.size_kb)}\n              </span>\n            </span>\n          </div>\n          \n          <div className=\"pt-4 border-t border-border\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2 text-xs\">\n                <Badge className={getStatusColor(report.status)} variant=\"outline\">\n                  {report.status === \"published\" ? \"منتشر شده\" : \n                   report.status === \"analyzed\" ? \"تحلیل شده\" : \"بارگذاری شده\"}\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-muted-foreground\">\n                  {fileCount} فایل\n                </Badge>\n              </div>\n              <ArrowRight className=\"w-4 h-4 text-muted-foreground\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}\n","size_bytes":4338},"client/src/components/ReportView.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, Star, Download, Share, Eye, FileText, Image, Globe, Calendar, Clock, Target, AlertTriangle, Users, Flag, CheckCircle, TrendingUp, TrendingDown, Minus } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport ChartsBoard from \"./ChartsBoard\";\nimport { getReport } from \"@/lib/api\";\nimport type { Report, KPI, WeeklyGoal, Milestone, RiskMitigation } from \"@shared/schema\";\n\nexport function ReportView() {\n  const { id } = useParams<{ id: string }>();\n  const [activeTab, setActiveTab] = useState(\"summary\");\n\n  const { data: report, isLoading, error } = useQuery({\n    queryKey: [\"/api/report\", id],\n    queryFn: () => getReport(id!),\n    enabled: !!id\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-8\">\n        <Card className=\"animate-pulse\">\n          <CardContent className=\"p-8\">\n            <div className=\"h-32 bg-muted rounded\"></div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error || !report) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-destructive\">Failed to load report. Please try again.</p>\n        <Link href=\"/\">\n          <Button className=\"mt-4\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n        </Link>\n      </div>\n    );\n  }\n\n  const getFileIcon = (type: string) => {\n    switch (type) {\n      case \"html\": return <Globe className=\"w-5 h-5\" />;\n      case \"image\": return <Image className=\"w-5 h-5\" />;\n      default: return <FileText className=\"w-5 h-5\" />;\n    }\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\"\n    });\n  };\n\n  const formatFileSize = (sizeKb: number) => {\n    if (sizeKb < 1024) return `${sizeKb} KB`;\n    return `${(sizeKb / 1024).toFixed(1)} MB`;\n  };\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"report-view\">\n      {/* Report Header */}\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </Link>\n          \n          <div className=\"flex items-center space-x-4 mb-4\">\n            <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-report-title\">\n              {report.title}\n            </h1>\n            {report.score && (\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-2xl font-bold text-accent\" data-testid=\"text-report-score\">\n                  {parseFloat(report.score).toFixed(1)}\n                </span>\n                <Star className=\"w-5 h-5 text-accent fill-current\" />\n              </div>\n            )}\n          </div>\n          \n          <div className=\"flex items-center space-x-6 text-sm text-muted-foreground\">\n            <span data-testid=\"text-publish-date\">\n              Published {formatDate(report.upload_date.toString())}\n            </span>\n            <span data-testid=\"text-file-count\">\n              {report.files?.length || 0} files analyzed\n            </span>\n            <span data-testid=\"text-file-size\">\n              {formatFileSize(parseFloat(report.size_kb))}\n            </span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"outline\" data-testid=\"button-export\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export PDF\n          </Button>\n          <Button data-testid=\"button-share\">\n            <Share className=\"w-4 h-4 mr-2\" />\n            Share\n          </Button>\n        </div>\n      </div>\n\n      {/* Report Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"summary\" data-testid=\"tab-summary\">Summary</TabsTrigger>\n          <TabsTrigger value=\"kpis\" data-testid=\"tab-kpis\">KPIs</TabsTrigger>\n          <TabsTrigger value=\"charts\" data-testid=\"tab-charts\">Charts</TabsTrigger>\n          <TabsTrigger value=\"plan\" data-testid=\"tab-plan\">Action Plan</TabsTrigger>\n          <TabsTrigger value=\"files\" data-testid=\"tab-files\">Source Files</TabsTrigger>\n        </TabsList>\n\n        {/* Summary Tab */}\n        <TabsContent value=\"summary\" className=\"space-y-6\">\n          <Card>\n            <CardContent className=\"p-8\">\n              <h2 className=\"text-xl font-semibold mb-6\">Executive Summary</h2>\n              <div \n                className=\"prose prose-slate max-w-none dark:prose-invert whitespace-pre-wrap\"\n                data-testid=\"content-summary\"\n              >\n                {report.ai_markdown || \"No summary available.\"}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* KPIs Tab */}\n        <TabsContent value=\"kpis\" className=\"space-y-6\">\n          {report.ai_json?.kpis && report.ai_json.kpis.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"kpis-grid\">\n              {report.ai_json.kpis.map((kpi: KPI, index: number) => (\n                <Card key={index} data-testid={`kpi-card-${index}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-sm font-medium text-muted-foreground\">{kpi.name}</h3>\n                      {kpi.trend === \"up\" && <TrendingUp className=\"w-5 h-5 text-accent\" />}\n                      {kpi.trend === \"down\" && <TrendingDown className=\"w-5 h-5 text-destructive\" />}\n                      {kpi.trend === \"stable\" && <Minus className=\"w-5 h-5 text-muted-foreground\" />}\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"text-2xl font-bold text-foreground\">{kpi.value}</div>\n                      <div className=\"text-sm text-muted-foreground\">{kpi.description}</div>\n                      <div className=\"w-full bg-muted rounded-full h-2\">\n                        <div \n                          className=\"bg-accent h-2 rounded-full transition-all duration-300\" \n                          style={{ width: `${Math.min(100, Math.max(0, kpi.percentage))}%` }}\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">No KPIs available for this report.</p>\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Charts Tab */}\n        <TabsContent value=\"charts\" className=\"space-y-8\">\n          {report.ai_json?.charts ? (\n            <ChartsBoard data={report.ai_json} />\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">No charts available for this report.</p>\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Action Plan Tab */}\n        <TabsContent value=\"plan\" className=\"space-y-8\">\n          {report.ai_json?.next_month_plan ? (\n            <Card>\n              <CardContent className=\"p-8\">\n                <h2 className=\"text-xl font-semibold mb-6\">30-Day Action Plan</h2>\n                \n                {/* Weekly Plan Grid */}\n                {report.ai_json.next_month_plan.weekly_plan && (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n                    {report.ai_json.next_month_plan.weekly_plan.map((week: WeeklyGoal[], weekIndex: number) => (\n                      <div key={weekIndex} className=\"space-y-4\" data-testid={`week-${weekIndex + 1}`}>\n                        <div className=\"flex items-center space-x-2 mb-4\">\n                          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                            <span className=\"text-sm font-bold text-primary-foreground\">{weekIndex + 1}</span>\n                          </div>\n                          <h3 className=\"font-semibold\">Week {weekIndex + 1}</h3>\n                        </div>\n                        \n                        <div className=\"space-y-3\">\n                          {week.map((goal: WeeklyGoal, goalIndex: number) => (\n                            <div key={goalIndex} className=\"p-3 bg-muted rounded-lg\">\n                              <h4 className=\"text-sm font-medium mb-1\">{goal.title}</h4>\n                              <p className=\"text-xs text-muted-foreground\">{goal.description}</p>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Milestones & Risks */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                  {/* Key Milestones */}\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-4\">Key Milestones</h3>\n                    <div className=\"space-y-4\" data-testid=\"milestones-list\">\n                      {report.ai_json.next_month_plan.milestones?.map((milestone: Milestone, index: number) => (\n                        <div key={index} className=\"flex items-start space-x-3\" data-testid={`milestone-${index}`}>\n                          <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center mt-0.5\">\n                            {milestone.completed ? (\n                              <CheckCircle className=\"w-3 h-3 text-primary-foreground\" />\n                            ) : (\n                              <Target className=\"w-3 h-3 text-primary-foreground\" />\n                            )}\n                          </div>\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-sm\">{milestone.title}</h4>\n                            <p className=\"text-xs text-muted-foreground\">{milestone.date}</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Risk Mitigations */}\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-4\">Risk Mitigations</h3>\n                    <div className=\"space-y-4\" data-testid=\"risks-list\">\n                      {report.ai_json.next_month_plan.risks_mitigations?.map((risk: RiskMitigation, index: number) => (\n                        <div \n                          key={index} \n                          className={`p-4 border rounded-lg ${\n                            risk.severity === \"high\" ? \"bg-destructive/10 border-destructive/20\" :\n                            risk.severity === \"medium\" ? \"bg-chart-4/10 border-chart-4/20\" :\n                            \"bg-chart-2/10 border-chart-2/20\"\n                          }`}\n                          data-testid={`risk-${index}`}\n                        >\n                          <div className=\"flex items-start space-x-3\">\n                            <AlertTriangle className={`w-5 h-5 mt-0.5 ${\n                              risk.severity === \"high\" ? \"text-destructive\" :\n                              risk.severity === \"medium\" ? \"text-chart-4\" :\n                              \"text-chart-2\"\n                            }`} />\n                            <div className=\"flex-1\">\n                              <h4 className={`font-medium text-sm ${\n                                risk.severity === \"high\" ? \"text-destructive\" :\n                                risk.severity === \"medium\" ? \"text-chart-4\" :\n                                \"text-chart-2\"\n                              }`}>\n                                {risk.title}\n                              </h4>\n                              <p className=\"text-xs text-muted-foreground mt-1\">{risk.mitigation}</p>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">No action plan available for this report.</p>\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Source Files Tab */}\n        <TabsContent value=\"files\" className=\"space-y-6\">\n          {report.files && report.files.length > 0 ? (\n            <div className=\"space-y-4\" data-testid=\"files-list\">\n              {report.files.map((file, index) => (\n                <Card key={index} data-testid={`file-card-${index}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          {getFileIcon(file.type)}\n                        </div>\n                        <div>\n                          <h3 className=\"font-medium\">{file.file_name}</h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {file.type.toUpperCase()} • {formatFileSize(file.size_kb)}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-file-${index}`}>\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-download-file-${index}`}>\n                          <Download className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">No source files available for this report.</p>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, AlertTriangle, CheckCircle } from \"lucide-react\";\n\ninterface ReportViewProps {\n  report: any;\n}\n\nexport default function ReportView({ report }: ReportViewProps) {\n  if (!report) return null;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* محتوای اصلی */}\n      {report.content ? (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5\" />\n              📋 محتوای گزارش\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div \n              className=\"prose prose-slate max-w-none dark:prose-invert\"\n              dangerouslySetInnerHTML={{ __html: report.content }}\n            />\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"action-urgent\">\n              <AlertTriangle className=\"h-8 w-8 text-red-500 mx-auto mb-3\" />\n              <h3 className=\"text-lg font-semibold text-red-800 mb-2\">⚠️ مشکل در خواندن فایل</h3>\n              <div className=\"text-sm text-red-600 space-y-2\">\n                <p>• HTML ممکنه به درستی parse نشه</p>\n                <p>• Encoding مشکل داشته باشه (UTF-8)</p>\n                <p>• فایل خراب یا ناقص باشه</p>\n                <p>• محتوا در دیتابیس ذخیره نمی‌شه</p>\n                <p>• فیلد content خالی میمونه</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* اطلاعات فایل */}\n      {report.files && report.files.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>📁 فایل‌های منبع</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {report.files.map((file: any, idx: number) => (\n              <div key={idx} className=\"flex items-center justify-between p-3 border rounded-lg mb-2\">\n                <div>\n                  <p className=\"font-medium\">{file.file_name}</p>\n                  <p className=\"text-sm text-gray-500\">\n                    {file.type} • {file.size_kb} KB\n                  </p>\n                </div>\n                <Badge variant=\"outline\">{file.type}</Badge>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* وضعیت پردازش */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"action-success\">\n            <CheckCircle className=\"h-6 w-6 text-green-500 mb-2\" />\n            <h4 className=\"font-semibold mb-2\">✅ اقدامات پیشنهادی:</h4>\n            <div className=\"text-sm space-y-1\">\n              <p>• فایل size limit چک کن</p>\n              <p>• MIME type رو درست تنظیم کن</p>\n              <p>• Error handling اضافه کن</p>\n              <p>• Loading state نشون بده</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":18088},"client/src/components/ScoreCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Star, TrendingUp, TrendingDown, Minus } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ScoreCardProps {\n  score: number;\n  trend?: \"up\" | \"down\" | \"stable\";\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport function ScoreCard({ score, trend, className, size = \"md\" }: ScoreCardProps) {\n  const getScoreColor = (score: number) => {\n    if (score >= 8) return \"text-accent\";\n    if (score >= 6) return \"text-chart-4\";\n    if (score >= 4) return \"text-chart-3\";\n    return \"text-destructive\";\n  };\n\n  const getTrendIcon = (trend?: string) => {\n    switch (trend) {\n      case \"up\":\n        return <TrendingUp className=\"w-4 h-4 text-accent\" />;\n      case \"down\":\n        return <TrendingDown className=\"w-4 h-4 text-destructive\" />;\n      case \"stable\":\n        return <Minus className=\"w-4 h-4 text-muted-foreground\" />;\n      default:\n        return null;\n    }\n  };\n\n  const sizeClasses = {\n    sm: \"text-lg\",\n    md: \"text-2xl\",\n    lg: \"text-3xl\"\n  };\n\n  return (\n    <Card className={cn(\"\", className)}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <span \n              className={cn(\n                \"font-bold\",\n                sizeClasses[size],\n                getScoreColor(score)\n              )}\n              data-testid=\"score-value\"\n            >\n              {score.toFixed(1)}\n            </span>\n            <Star className={cn(\n              \"w-5 h-5 fill-current\",\n              getScoreColor(score)\n            )} />\n          </div>\n          {trend && getTrendIcon(trend)}\n        </div>\n        <div className=\"mt-2\">\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div \n              className={cn(\n                \"h-2 rounded-full transition-all duration-300\",\n                score >= 8 ? \"bg-accent\" :\n                score >= 6 ? \"bg-chart-4\" :\n                score >= 4 ? \"bg-chart-3\" :\n                \"bg-destructive\"\n              )}\n              style={{ width: `${(score / 10) * 100}%` }}\n            />\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            Overall Quality Score\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2366},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"theme\") as Theme;\n    if (stored) {\n      setTheme(stored);\n    } else if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      setTheme(\"dark\");\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n    if (theme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1306},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/aiClient.ts":{"content":"// This file is server-side only and should not be used in the client\n// It's here for organization but will be moved to server-side in actual implementation\n\nimport OpenAI from \"openai\";\nimport { jsonSafeParse } from \"./jsonSafeParse.js\";\nimport type { AnalysisData } from \"@shared/analysisSchema\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.LLM_API_KEY || process.env.OPENAI_API_KEY \n});\n\nconst AI_ANALYSIS_SCHEMA = {\n  type: \"object\",\n  properties: {\n    kpis: {\n      type: \"array\",\n      items: {\n        type: \"object\",\n        properties: {\n          name: { type: \"string\" },\n          value: { type: \"string\" },\n          description: { type: \"string\" },\n          trend: { type: \"string\", enum: [\"up\", \"down\", \"stable\"] },\n          percentage: { type: \"number\" }\n        },\n        required: [\"name\", \"value\", \"description\", \"trend\", \"percentage\"]\n      }\n    },\n    trend_summary: { type: \"string\" },\n    insights: {\n      type: \"array\",\n      items: { type: \"string\" }\n    },\n    score: { type: \"number\", minimum: 0, maximum: 10 },\n    charts: {\n      type: \"array\",\n      items: {\n        type: \"object\",\n        properties: {\n          type: { type: \"string\", enum: [\"line\", \"bar\", \"pie\", \"area\"] },\n          title: { type: \"string\" },\n          data: { type: \"array\" },\n          xKey: { type: \"string\" },\n          yKey: { type: \"string\" }\n        },\n        required: [\"type\", \"title\", \"data\"]\n      }\n    },\n    next_month_plan: {\n      type: \"object\",\n      properties: {\n        weekly_plan: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              description: { type: \"string\" },\n              metrics: {\n                type: \"array\",\n                items: { type: \"string\" }\n              }\n            },\n            required: [\"title\", \"description\", \"metrics\"]\n          },\n          minItems: 4,\n          maxItems: 4\n        },\n        milestones: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              date: { type: \"string\" },\n              status: { type: \"string\", enum: [\"pending\", \"completed\", \"overdue\"] }\n            },\n            required: [\"title\", \"date\", \"status\"]\n          }\n        },\n        risks_mitigations: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              mitigation: { type: \"string\" },\n              priority: { type: \"string\", enum: [\"low\", \"medium\", \"high\"] }\n            },\n            required: [\"title\", \"mitigation\", \"priority\"]\n          }\n        }\n      },\n      required: [\"weekly_plan\", \"milestones\", \"risks_mitigations\"]\n    }\n  },\n  required: [\"kpis\", \"trend_summary\", \"insights\", \"score\", \"charts\", \"next_month_plan\"]\n};\n\nexport async function analyzeWithAI(corpus: string) {\n  try {\n    // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert business intelligence analyst. Analyze the provided document corpus and extract key insights, KPIs, trends, and create actionable recommendations.\n\n          Return your analysis as a JSON object with this exact structure:\n          - kpis: Array of key performance indicators with name, value, description, trend (up/down/stable), and percentage\n          - trend_summary: Brief summary of overall trends\n          - insights: Array of key insights and findings\n          - score: Overall report quality score (0-10)\n          - charts: Array of chart specifications for data visualization\n          - next_month_plan: Object with weekly_plan (4 weeks), milestones, and risks_mitigations\n\n          Focus on actionable insights and realistic recommendations based on the document content.`\n        },\n        {\n          role: \"user\",\n          content: `Please analyze this document corpus and provide insights:\\n\\n${corpus}`\n        }\n      ],\n      response_format: { type: \"json_object\" }\n    });\n\n    const aiJsonText = response.choices[0].message.content || \"{}\";\n    const aiJson = jsonSafeParse(aiJsonText) as AnalysisData;\n\n    // Generate executive summary\n    const summaryResponse = await openai.chat.completions.create({\n      model: \"gpt-5\", \n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a business analyst. Write a concise executive summary in markdown format based on the analysis results.\"\n        },\n        {\n          role: \"user\",\n          content: `Create an executive summary based on this analysis: ${JSON.stringify(aiJson)}`\n        }\n      ]\n    });\n\n    const aiMarkdown = summaryResponse.choices[0].message.content || \"\";\n\n    return {\n      json: aiJson,\n      markdown: aiMarkdown,\n      score: aiJson.score || 0\n    };\n\n  } catch (error) {\n    console.error('AI analysis error:', error);\n    throw new Error('Failed to analyze document with AI');\n  }\n}\n\nexport async function analyzeImageWithAI(base64Image: string): Promise<string> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: \"Extract all text, data, and insights from this image. Focus on numbers, charts, tables, and any business-relevant information.\"\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/jpeg;base64,${base64Image}`\n              }\n            }\n          ],\n        },\n      ],\n      max_completion_tokens: 2048,\n    });\n\n    return response.choices[0].message.content || \"\";\n  } catch (error) {\n    console.error('Image analysis error:', error);\n    return \"\";\n  }\n}\n","size_bytes":6038},"client/src/lib/api.ts":{"content":"import { queryClient } from \"./queryClient\";\nimport type { Report } from \"@shared/schema\";\n\nexport interface ApiError {\n  message: string;\n  status: number;\n}\n\nexport async function apiCall<T>(\n  endpoint: string,\n  options: RequestInit = {}\n): Promise<T> {\n  const response = await fetch(endpoint, {\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      ...options.headers,\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`${response.status}: ${errorText}`);\n  }\n\n  return response.json();\n}\n\nexport async function uploadFiles(title: string, files: FileList): Promise<any> {\n  const formData = new FormData();\n  formData.append(\"title\", title);\n  \n  Array.from(files).forEach((file) => {\n    formData.append(\"files\", file);\n  });\n\n  const response = await fetch(\"/api/upload\", {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: {\n      \"X-Requested-With\": \"XMLHttpRequest\",\n    },\n    body: formData,\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Upload failed: ${errorText}`);\n  }\n\n  return response.json();\n}\n\n// Auth functions\nexport async function login(password: string) {\n  return apiCall(\"/api/login\", {\n    method: \"POST\",\n    body: JSON.stringify({ password }),\n  });\n}\n\nexport async function logout() {\n  return apiCall(\"/api/logout\", { method: \"POST\" });\n}\n\nexport async function getCurrentUser() {\n  return apiCall(\"/api/me\");\n}\n\n// Report functions\nexport async function getPublishedReports() {\n  return apiCall(\"/api/list\");\n}\n\nexport async function getReport(id: string): Promise<Report> {\n  return apiCall(`/api/report/${id}`);\n}\n\nexport async function analyzeReport(id: string) {\n  return apiCall(`/api/analyze/${id}`, { method: \"POST\" });\n}\n\nexport async function publishReport(id: string) {\n  return apiCall(`/api/publish/${id}`, { method: \"POST\" });\n}\n\nexport async function deleteReport(id: string) {\n  return apiCall(`/api/delete/${id}`, { method: \"DELETE\" });\n}\n\nexport async function getAdminReports() {\n  return apiCall(\"/api/admin/reports\");\n}\n\n// Cache invalidation helpers\nexport function invalidateReports() {\n  queryClient.invalidateQueries({ queryKey: [\"/api/list\"] });\n  queryClient.invalidateQueries({ queryKey: [\"/api/admin/reports\"] });\n}\n\nexport function invalidateReport(id: string) {\n  queryClient.invalidateQueries({ queryKey: [\"/api/report\", id] });\n}\n","size_bytes":2504},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface AuthUser {\n  role: 'admin' | 'public';\n}\n\nexport async function login(password: string): Promise<void> {\n  await apiRequest(\"POST\", \"/api/login\", { password });\n}\n\nexport async function logout(): Promise<void> {\n  await apiRequest(\"POST\", \"/api/logout\");\n}\n\nexport async function getCurrentUser(): Promise<AuthUser> {\n  const response = await apiRequest(\"GET\", \"/api/me\");\n  return await response.json();\n}\n\nexport function requireAdminHeaders() {\n  return {\n    'X-Requested-With': 'XMLHttpRequest'\n  };\n}\n","size_bytes":569},"client/src/lib/extractors.ts":{"content":"import { FileItem } from \"@shared/schema\";\n\nexport async function extractTextFromFiles(files: FileItem[]): Promise<string> {\n  const textParts: string[] = [];\n\n  for (const file of files) {\n    try {\n      if (file.extracted_text) {\n        textParts.push(file.extracted_text);\n        continue;\n      }\n\n      // For client-side, we'll rely on server-side extraction\n      // This is a placeholder for the actual extraction logic\n      const response = await fetch(`/api/extract-text`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ file })\n      });\n\n      if (response.ok) {\n        const { text } = await response.json();\n        textParts.push(text);\n      }\n    } catch (error) {\n      console.warn('Failed to extract text from file:', file.file_name);\n    }\n  }\n\n  return textParts.join('\\n\\n');\n}\n\n// Server-side extraction functions (for reference)\nexport function extractTextFromHTML(html: string): string {\n  // Remove script and style tags\n  const cleanHtml = html.replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, '')\n                       .replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, '');\n  \n  // Extract title\n  const titleMatch = cleanHtml.match(/<title[^>]*>([\\s\\S]*?)<\\/title>/i);\n  const title = titleMatch ? titleMatch[1] : '';\n  \n  // Strip all HTML tags and decode entities\n  const text = cleanHtml.replace(/<[^>]+>/g, ' ')\n                       .replace(/&nbsp;/g, ' ')\n                       .replace(/&amp;/g, '&')\n                       .replace(/&lt;/g, '<')\n                       .replace(/&gt;/g, '>')\n                       .replace(/&quot;/g, '\"')\n                       .replace(/&#39;/g, \"'\")\n                       .replace(/\\s+/g, ' ')\n                       .trim();\n  \n  return title ? `${title}\\n\\n${text}` : text;\n}\n\nexport function sanitizeHTML(html: string): string {\n  // Remove script and style tags and potentially harmful content\n  const cleanHtml = html.replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, '')\n                       .replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, '')\n                       .replace(/<iframe[^>]*>[\\s\\S]*?<\\/iframe>/gi, '')\n                       .replace(/on\\w+=\"[^\"]*\"/gi, '') // Remove event handlers\n                       .replace(/javascript:/gi, ''); // Remove javascript: urls\n\n  return cleanHtml;\n}\n","size_bytes":2341},"client/src/lib/jsonSafeParse.ts":{"content":"export function jsonSafeParse(jsonString: string): any {\n  try {\n    return JSON.parse(jsonString);\n  } catch (error) {\n    // Attempt to repair common JSON issues\n    let repaired = jsonString.trim();\n    \n    // Remove potential markdown code block markers\n    repaired = repaired.replace(/^```json\\s*/, '').replace(/\\s*```$/, '');\n    \n    // Fix trailing commas\n    repaired = repaired.replace(/,(\\s*[}\\]])/g, '$1');\n    \n    // Fix missing quotes around keys\n    repaired = repaired.replace(/([{,]\\s*)([a-zA-Z_][a-zA-Z0-9_]*)\\s*:/g, '$1\"$2\":');\n    \n    // Try parsing again\n    try {\n      return JSON.parse(repaired);\n    } catch (secondError) {\n      console.error(\"JSON parsing failed even after repair attempts:\", secondError);\n      console.error(\"Original string:\", jsonString);\n      console.error(\"Repaired string:\", repaired);\n      throw new Error(\"Failed to parse JSON response from AI\");\n    }\n  }\n}\n\nfunction getDefaultAnalysisData() {\n  return {\n    report_id: \"unknown\",\n    timeframe: { start: new Date().toISOString().split('T')[0], end: new Date().toISOString().split('T')[0] },\n    kpis: [],\n    trend_summary: \"Analysis data not available\",\n    insights: [],\n    score: 0,\n    charts: [],\n    next_month_plan: {\n      focus_themes: [],\n      weekly_plan: [\n        { week: 1, goals: [], metrics: [], owner: \"\" },\n        { week: 2, goals: [], metrics: [], owner: \"\" },\n        { week: 3, goals: [], metrics: [], owner: \"\" },\n        { week: 4, goals: [], metrics: [], owner: \"\" }\n      ],\n      milestones: [],\n      risks_mitigations: []\n    }\n  };\n}\n","size_bytes":1578},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/supabaseClient.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Storage helper functions\nexport async function uploadFile(file: File, bucket: string, path: string) {\n  const { data, error } = await supabase.storage\n    .from(bucket)\n    .upload(path, file);\n\n  if (error) throw error;\n  return data;\n}\n\nexport async function getPublicUrl(bucket: string, path: string) {\n  const { data } = supabase.storage\n    .from(bucket)\n    .getPublicUrl(path);\n\n  return data.publicUrl;\n}\n\nexport async function deleteFile(bucket: string, path: string) {\n  const { error } = await supabase.storage\n    .from(bucket)\n    .remove([path]);\n\n  if (error) throw error;\n}\n","size_bytes":941},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { AdminPanel } from \"@/components/AdminPanel\";\nimport { AdminLogin } from \"@/components/AdminLogin\";\nimport { getCurrentUser } from \"@/lib/api\";\n\nexport default function AdminPage() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/me\"],\n    queryFn: getCurrentUser\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (user?.role === \"admin\") {\n    return <AdminPanel />;\n  }\n\n  return <AdminLogin />;\n}\n","size_bytes":663},"client/src/pages/dashboard.tsx":{"content":"import { Dashboard } from \"@/components/Dashboard\";\n\nexport default function DashboardPage() {\n  return <Dashboard />;\n}\n","size_bytes":121},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/report.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, Star, Download, Share, Eye, FileText, Image, Globe, Calendar, Clock, Target, AlertTriangle, Users, Flag, CheckCircle, TrendingUp, TrendingDown, Minus, Brain, Loader2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ChartsBoard from \"@/components/ChartsBoard\";\nimport SummaryTab from \"@/components/SummaryTab\";\nimport KPIsTab from \"@/components/KPIsTab\";\nimport PlanView from \"@/components/PlanView\";\nimport AIAnalyzeTabs from \"@/components/AIAnalyzeTabs\";\nimport { jsonSafeParse } from \"@/lib/jsonSafeParse\";\nimport SmartActionButtons from \"@/components/SmartActionButtons\";\nimport FloatingActionButton from \"@/components/FloatingActionButton\";\n\nexport default function ReportPage() {\n  const { id } = useParams<{ id: string }>();\n  const [activeTab, setActiveTab] = useState(\"summary\");\n  const [currentReport, setCurrentReport] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: fetchedReport, isLoading, error } = useQuery({\n    queryKey: [\"report\", id],\n    queryFn: async () => {\n      const response = await fetch(`/api/report/${id}`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch report\");\n      }\n      return response.json();\n    },\n    enabled: !!id\n  });\n\n  // Check if user is admin - MOVED HERE to avoid hooks order issues\n  const { data: userInfo } = useQuery({\n    queryKey: [\"user-info\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/me\");\n        if (!response.ok) return { role: \"public\" };\n        return response.json();\n      } catch {\n        return { role: \"public\" };\n      }\n    }\n  });\n  const isAdmin = userInfo?.role === \"admin\";\n\n  // Handle report data updates\n  useEffect(() => {\n    if (fetchedReport && !currentReport) {\n      setCurrentReport(fetchedReport);\n    }\n  }, [fetchedReport, currentReport]);\n\n  const report = currentReport || fetchedReport;\n  // State to hold the report data, used by SmartActionButtons\n  const [reportState, setReportState] = useState<any>(report);\n\n  const handleReportUpdate = (updatedReport: any) => {\n    setCurrentReport(updatedReport);\n    setReportState(updatedReport); // Update reportState as well\n    queryClient.setQueryData([\"report\", id], updatedReport);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  if (error || !report) {\n    return (\n      <div className=\"text-center py-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">گزارش یافت نشد</h2>\n        <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n          گزارشی که به دنبال آن هستید وجود ندارد یا منتشر نشده است.\n        </p>\n        <Link href=\"/\">\n          <Button className=\"mt-4\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n        </Link>\n      </div>\n    );\n  }\n\n  const analysisData = report.ai_json || null;\n  const hasAnalysis = analysisData && typeof analysisData === 'object';\n\n  const getFileIcon = (type: string) => {\n    switch (type) {\n      case \"html\": return <Globe className=\"w-5 h-5\" />;\n      case \"image\": return <Image className=\"w-5 h-5\" />;\n      default: return <FileText className=\"w-5 h-5\" />;\n    }\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\"\n    });\n  };\n\n  const formatFileSize = (sizeKb: number) => {\n    if (sizeKb < 1024) return `${sizeKb} KB`;\n    return `${(sizeKb / 1024).toFixed(1)} MB`;\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-6\">\n      {/* Report Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex-1\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              بازگشت به داشبورد\n            </Button>\n          </Link>\n\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <h1 className=\"text-3xl font-bold\">{report.title}</h1>\n            {report.score && (\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-2xl font-bold text-accent\">\n                  {parseFloat(report.score).toFixed(1)}\n                </span>\n                <Star className=\"w-5 h-5 text-accent fill-current\" />\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"secondary\">\n              {report.status === \"published\" ? \"منتشر شده\" : \"پیش‌نویس\"}\n            </Badge>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"outline\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            صادرات PDF\n          </Button>\n          <Button>\n            <Share className=\"w-4 h-4 mr-2\" />\n            اشتراک‌گذاری\n          </Button>\n        </div>\n      </div>\n\n      {/* Debug Info - برای بررسی وضعیت */}\n      {process.env.NODE_ENV === 'development' && (\n        <Card className=\"mb-6 border-yellow-200 bg-yellow-50\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"text-sm font-semibold text-yellow-800 mb-2\">🔍 اطلاعات دیباگ (حالت توسعه)</h3>\n            <div className=\"text-xs text-yellow-700 space-y-1\">\n              <p><strong>ID گزارش:</strong> {report.id}</p>\n              <p><strong>عنوان:</strong> {report.title}</p>\n              <p><strong>حجم محتوا:</strong> {report.content?.length || 0} کاراکتر</p>\n              <p><strong>نوع فایل:</strong> {report.files?.[0]?.type || 'نامشخص'}</p>\n              <p><strong>وضعیت AI:</strong> {report.ai_json ? '✅ تحلیل شده' : '❌ تحلیل نشده'}</p>\n              <p><strong>امتیاز:</strong> {report.score || 0}/100</p>\n              <p><strong>آخرین بروزرسانی:</strong> {new Date(report.upload_date).toLocaleString('fa-IR')}</p>\n              {report.content && (\n                <details className=\"mt-2\">\n                  <summary className=\"cursor-pointer text-yellow-600\">نمایش 200 کاراکتر اول محتوا</summary>\n                  <pre className=\"mt-2 p-2 bg-white rounded text-xs overflow-x-auto\">\n                    {report.content.substring(0, 200)}...\n                  </pre>\n                </details>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* AI Analysis Component */}\n      <AIAnalyzeTabs report={report} onUpdate={handleReportUpdate} />\n\n      {/* Smart Action Buttons */}\n      <div className=\"mb-8\">\n        <SmartActionButtons\n          report={reportState}\n          onAnalyze={() => {\n            // Trigger AI analysis from AIAnalyzeTabs\n            const analyzeButton = document.querySelector('[data-analyze-button]') as HTMLButtonElement;\n            analyzeButton?.click();\n          }}\n          onUpdate={setReportState}\n        />\n      </div>\n\n      {/* Source Files Section */}\n      {report.files && report.files.length > 0 && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">فایل‌های منبع</h3>\n            <div className=\"space-y-4\">\n              {report.files.map((file: any, index: number) => (\n                <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      {getFileIcon(file.type)}\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">{file.file_name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {file.type.toUpperCase()} • {formatFileSize(file.size_kb)}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <Eye className=\"w-4 h-4\" />\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <Download className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* نمایش محتوای گزارش */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            📋 محتوای گزارش\n          </h3>\n\n          {(report.extracted_text || report.content) ? (\n            <div className=\"space-y-4\">\n              {/* نمایش خام محتوا */}\n              <div className=\"bg-gray-50 p-4 rounded-lg max-h-96 overflow-y-auto\">\n                <pre className=\"whitespace-pre-wrap text-sm font-mono text-gray-800\">\n                  {(report.extracted_text || report.content).substring(0, 2000)}\n                  {(report.extracted_text || report.content).length > 2000 && \"...\"}\n                </pre>\n              </div>\n\n              {/* نمایش ایمن متن (بدون HTML برای جلوگیری از XSS) */}\n              <div className=\"border-t pt-4\">\n                <h4 className=\"font-medium mb-2\">محتوای استخراج شده:</h4>\n                <div className=\"bg-white p-4 rounded border max-h-64 overflow-y-auto\">\n                  <div className=\"whitespace-pre-wrap text-sm leading-6\">\n                    {(report.extracted_text || report.content)\n                      .replace(/<[^>]+>/g, ' ') // حذف تمام تگ‌های HTML\n                      .replace(/&nbsp;/g, ' ')\n                      .replace(/&amp;/g, '&')\n                      .replace(/&lt;/g, '<')\n                      .replace(/&gt;/g, '>')\n                      .replace(/&quot;/g, '\"')\n                      .replace(/&#39;/g, \"'\")\n                      .replace(/\\s+/g, ' ')\n                      .trim()\n                    }\n                  </div>\n                </div>\n              </div>\n\n              {/* اطلاعات فایل */}\n              <div className=\"bg-blue-50 p-3 rounded-lg text-sm\">\n                <p><strong>حجم محتوا:</strong> {(report.extracted_text || report.content).length.toLocaleString()} کاراکتر</p>\n                <p><strong>نوع فایل:</strong> {report.files?.[0]?.type || 'نامشخص'}</p>\n                <p><strong>وضعیت:</strong> \n                  <span className=\"text-green-600 font-medium\"> ✅ محتوا با موفقیت استخراج شده</span>\n                </p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"action-urgent\">\n              <AlertTriangle className=\"h-8 w-8 text-red-500 mx-auto mb-3\" />\n              <h3 className=\"text-lg font-semibold text-red-800 mb-2\">⚠️ محتوا خالی است</h3>\n              <div className=\"text-sm text-red-600 space-y-2\">\n                <p><strong>مشکلات احتمالی:</strong></p>\n                <p>🔍 فایل به درستی parse نشده</p>\n                <p>🔤 مشکل Encoding (باید UTF-8 باشد)</p>\n                <p>📄 فایل خراب یا ناقص</p>\n                <p>💾 مشکل در ذخیره‌سازی دیتابیس</p>\n\n                <div className=\"mt-4 p-3 bg-blue-50 rounded\">\n                  <p><strong>🛠️ راه‌حل‌های پیشنهادی:</strong></p>\n                  <p>• فایل HTML را مجدداً آپلود کنید</p>\n                  <p>• از فایل‌های کوچک‌تر (زیر 1MB) استفاده کنید</p>\n                  <p>• Console browser را چک کنید</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Floating Action Button */}\n      <FloatingActionButton\n        onAction={(action) => {\n          switch(action) {\n            case \"analyze\":\n              const analyzeButton = document.querySelector('[data-analyze-button]') as HTMLButtonElement;\n              analyzeButton?.click();\n              break;\n            case \"charts\":\n              console.log(\"Generate charts\");\n              break;\n            case \"goals\":\n              console.log(\"Set goals\");\n              break;\n            case \"export\":\n              console.log(\"Export PDF\");\n              break;\n          }\n        }}\n      />\n    </div>\n  );\n}","size_bytes":13421},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1897},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"shared/analysisSchema.ts":{"content":"\nexport const AnalysisSchema = {\n  \"type\": \"object\",\n  \"required\": [\"report_id\",\"timeframe\",\"kpis\",\"trend_summary\",\"insights\",\"score\",\"charts\",\"next_month_plan\"],\n  \"properties\": {\n    \"report_id\": {\"type\":\"string\"},\n    \"timeframe\": {\"type\":\"object\",\"properties\":{\"start\":{\"type\":\"string\"},\"end\":{\"type\":\"string\"}}},\n    \"kpis\": {\n      \"type\":\"array\",\n      \"items\":{\"type\":\"object\",\"required\":[\"name\",\"value\"],\"properties\":{\n        \"name\":{\"type\":\"string\"},\n        \"value\":{\"type\":\"number\"},\n        \"unit\":{\"type\":\"string\"},\n        \"target\":{\"type\":\"number\"},\n        \"delta\":{\"type\":\"number\"}\n      }}\n    },\n    \"trend_summary\":{\"type\":\"string\"},\n    \"insights\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\n      \"type\":{\"type\":\"string\",\"enum\":[\"win\",\"risk\",\"issue\",\"opportunity\"]},\n      \"text\":{\"type\":\"string\"}\n    }}},\n    \"score\":{\"type\":\"number\",\"minimum\":0,\"maximum\":100},\n    \"charts\":{\n      \"type\":\"array\",\n      \"items\":{\"type\":\"object\",\"required\":[\"title\",\"type\",\"series\"],\"properties\":{\n        \"title\":{\"type\":\"string\"},\n        \"type\":{\"type\":\"string\",\"enum\":[\"line\",\"bar\",\"pie\"]},\n        \"series\":{\"type\":\"array\",\"items\":{\n          \"type\":\"object\",\"required\":[\"name\",\"points\"],\n          \"properties\":{\"name\":{\"type\":\"string\"},\"points\":{\"type\":\"array\",\"items\":{\n            \"type\":\"object\",\"required\":[\"x\",\"y\"],\n            \"properties\":{\"x\":{\"type\":\"string\"},\"y\":{\"type\":\"number\"}}\n          }}}\n        }}\n      }}\n    },\n    \"next_month_plan\":{\n      \"type\":\"object\",\n      \"required\":[\"focus_themes\",\"weekly_plan\",\"milestones\",\"risks_mitigations\"],\n      \"properties\":{\n        \"focus_themes\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\n        \"weekly_plan\":{\"type\":\"array\",\"minItems\":4,\"maxItems\":4,\"items\":{\"type\":\"object\",\"properties\":{\n          \"week\":{\"type\":\"number\"},\n          \"goals\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\n          \"metrics\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\n          \"owner\":{\"type\":\"string\"}\n        }}},\n        \"milestones\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\n          \"title\":{\"type\":\"string\"},\n          \"due\":{\"type\":\"string\"}\n        }}},\n        \"risks_mitigations\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\n          \"risk\":{\"type\":\"string\"},\n          \"mitigation\":{\"type\":\"string\"}\n        }}}\n      }\n    }\n  }\n};\n\nexport interface AnalysisData {\n  report_id: string;\n  timeframe: {\n    start: string;\n    end: string;\n  };\n  kpis: Array<{\n    name: string;\n    value: number;\n    unit?: string;\n    target?: number;\n    delta?: number;\n  }>;\n  trend_summary: string;\n  insights: Array<{\n    type: \"win\" | \"risk\" | \"issue\" | \"opportunity\";\n    text: string;\n  }>;\n  score: number;\n  charts: Array<{\n    title: string;\n    type: \"line\" | \"bar\" | \"pie\";\n    series: Array<{\n      name: string;\n      points: Array<{\n        x: string;\n        y: number;\n      }>;\n    }>;\n  }>;\n  next_month_plan: {\n    focus_themes: string[];\n    weekly_plan: Array<{\n      week: number;\n      goals: string[];\n      metrics: string[];\n      owner: string;\n    }>;\n    milestones: Array<{\n      title: string;\n      due: string;\n    }>;\n    risks_mitigations: Array<{\n      risk: string;\n      mitigation: string;\n    }>;\n  };\n}\n","size_bytes":3246},"shared/sampleData.ts":{"content":"\nimport { AnalysisData } from \"./analysisSchema\";\n\nexport const sampleAnalysisData: AnalysisData = {\n  \"report_id\": \"seed\",\n  \"timeframe\": { \"start\": \"2025-08-15\", \"end\": \"2025-09-15\" },\n  \"kpis\": [\n    { \"name\": \"Orders\", \"value\": 120, \"unit\": \"\", \"target\": 150, \"delta\": 15 },\n    { \"name\": \"On-time %\", \"value\": 92, \"unit\": \"%\", \"target\": 95, \"delta\": 3 },\n    { \"name\": \"Revenue\", \"value\": 42000, \"unit\": \"CAD\", \"target\": 50000, \"delta\": 8000 }\n  ],\n  \"trend_summary\": \"Growth in orders and revenue; slight gap to targets.\",\n  \"insights\": [\n    { \"type\": \"win\", \"text\": \"Same-day delivery uptake rose 18%\" },\n    { \"type\": \"risk\", \"text\": \"Driver availability on weekends is tight\" }\n  ],\n  \"score\": 82,\n  \"charts\": [\n    {\n      \"title\": \"Orders per week\",\n      \"type\": \"line\",\n      \"series\": [{\n        \"name\": \"Orders\",\n        \"points\": [\n          { \"x\": \"2025-08-18\", \"y\": 22 },\n          { \"x\": \"2025-08-25\", \"y\": 27 },\n          { \"x\": \"2025-09-01\", \"y\": 31 },\n          { \"x\": \"2025-09-08\", \"y\": 40 }\n        ]\n      }]\n    },\n    {\n      \"title\": \"Revenue\",\n      \"type\": \"bar\", \n      \"series\": [{\n        \"name\": \"CAD\",\n        \"points\": [\n          { \"x\": \"2025-08-18\", \"y\": 9000 },\n          { \"x\": \"2025-08-25\", \"y\": 10000 },\n          { \"x\": \"2025-09-01\", \"y\": 11000 },\n          { \"x\": \"2025-09-08\", \"y\": 12000 }\n        ]\n      }]\n    }\n  ],\n  \"next_month_plan\": {\n    \"focus_themes\": [\"On-time rate\", \"B2B partnerships\", \"Cost per delivery\"],\n    \"weekly_plan\": [\n      { \"week\": 1, \"goals\": [\"Audit late routes\", \"Pilot SMS ETA\"], \"metrics\": [\"late%\", \"ETA open%\"], \"owner\": \"Ops\" },\n      { \"week\": 2, \"goals\": [\"Sign 2 partners\", \"Bundle pricing\"], \"metrics\": [\"partners\", \"ARPU\"], \"owner\": \"Sales\" },\n      { \"week\": 3, \"goals\": [\"Optimize dispatch\"], \"metrics\": [\"cost/stop\", \"utilization%\"], \"owner\": \"Ops\" },\n      { \"week\": 4, \"goals\": [\"Review targets\", \"QBR deck\"], \"metrics\": [\"score\", \"target gap\"], \"owner\": \"Exec\" }\n    ],\n    \"milestones\": [{ \"title\": \"2 B2B contracts\", \"due\": \"2025-10-10\" }],\n    \"risks_mitigations\": [{ \"risk\": \"Weekend capacity\", \"mitigation\": \"Hire 2 PT drivers\" }]\n  }\n};\n","size_bytes":2135},"client/src/components/KPIsTab.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { TrendingUp, TrendingDown, AlertTriangle, CheckCircle, AlertCircle, Target } from 'lucide-react';\nimport { AnalysisData } from '@shared/analysisSchema';\n\ninterface KPIsTabProps {\n  data: AnalysisData;\n}\n\nexport default function KPIsTab({ data }: KPIsTabProps) {\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case 'win': return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'risk': return <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />;\n      case 'issue': return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n      case 'opportunity': return <Target className=\"w-4 h-4 text-blue-500\" />;\n      default: return <AlertCircle className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return 'bg-green-500';\n    if (score >= 60) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overall Score */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-lg font-semibold\">امتیاز عملکرد کلی</h3>\n              <p className=\"text-sm text-muted-foreground\">بر اساس تمام KPI ها و اهداف</p>\n            </div>\n            <div className={`w-20 h-20 rounded-full ${getScoreColor(data.score)} flex items-center justify-center`}>\n              <span className=\"text-2xl font-bold text-white\">{data.score}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* KPIs Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {data.kpis.map((kpi, index) => (\n          <Card key={index}>\n            <CardContent className=\"p-4\">\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-sm text-muted-foreground\">{kpi.name}</h4>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-2xl font-bold\">\n                    {kpi.value.toLocaleString()}{kpi.unit && ` ${kpi.unit}`}\n                  </span>\n                  {kpi.delta !== undefined && (\n                    <div className={`flex items-center ${kpi.delta >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                      {kpi.delta >= 0 ? <TrendingUp className=\"w-4 h-4\" /> : <TrendingDown className=\"w-4 h-4\" />}\n                      <span className=\"ml-1 text-sm font-medium\">\n                        {kpi.delta >= 0 ? '+' : ''}{kpi.delta.toLocaleString()}\n                      </span>\n                    </div>\n                  )}\n                </div>\n                {kpi.target !== undefined && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    Target: {kpi.target.toLocaleString()}{kpi.unit && ` ${kpi.unit}`}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Trend Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Trend Summary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p>{data.trend_summary}</p>\n        </CardContent>\n      </Card>\n\n      {/* Insights */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Key Insights</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {data.insights.map((insight, index) => (\n              <div key={index} className=\"flex items-start space-x-3 p-3 rounded-lg bg-muted/50\">\n                {getInsightIcon(insight.type)}\n                <div className=\"flex-1\">\n                  <Badge variant=\"outline\" className=\"mb-1 capitalize\">\n                    {insight.type}\n                  </Badge>\n                  <p className=\"text-sm\">{insight.text}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4156},"client/src/components/PlanView.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Calendar, Target, AlertTriangle, CheckCircle2 } from 'lucide-react';\nimport { AnalysisData } from '@shared/analysisSchema';\n\ninterface PlanViewProps {\n  data: AnalysisData;\n}\n\nexport default function PlanView({ data }: PlanViewProps) {\n  const plan = data.next_month_plan;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Focus Themes */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Target className=\"w-5 h-5\" />\n            <span>Focus Themes</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-2\">\n            {plan.focus_themes.map((theme, index) => (\n              <Badge key={index} variant=\"secondary\" className=\"px-3 py-1\">\n                {theme}\n              </Badge>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Weekly Plan */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Calendar className=\"w-5 h-5\" />\n            <span>4-Week Action Plan</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {plan.weekly_plan.map((week, index) => (\n              <Card key={index} className=\"border-l-4 border-l-primary\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg\">Week {week.week}</CardTitle>\n                  {week.owner && (\n                    <Badge variant=\"outline\" className=\"w-fit\">\n                      Owner: {week.owner}\n                    </Badge>\n                  )}\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div>\n                    <h4 className=\"font-medium text-sm text-muted-foreground mb-2\">Goals</h4>\n                    <ul className=\"space-y-1\">\n                      {week.goals.map((goal, goalIndex) => (\n                        <li key={goalIndex} className=\"flex items-start space-x-2 text-sm\">\n                          <CheckCircle2 className=\"w-4 h-4 mt-0.5 text-green-500 flex-shrink-0\" />\n                          <span>{goal}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                  \n                  {week.metrics && week.metrics.length > 0 && (\n                    <div>\n                      <h4 className=\"font-medium text-sm text-muted-foreground mb-2\">Key Metrics</h4>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {week.metrics.map((metric, metricIndex) => (\n                          <Badge key={metricIndex} variant=\"outline\" className=\"text-xs\">\n                            {metric}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Milestones */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Key Milestones</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {plan.milestones.length > 0 ? (\n            <div className=\"space-y-3\">\n              {plan.milestones.map((milestone, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 rounded-lg bg-muted/50\">\n                  <span className=\"font-medium\">{milestone.title}</span>\n                  <Badge variant=\"outline\">\n                    Due: {new Date(milestone.due).toLocaleDateString()}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-muted-foreground\">No milestones defined for this period.</p>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Risks & Mitigations */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <AlertTriangle className=\"w-5 h-5\" />\n            <span>Risks & Mitigations</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {plan.risks_mitigations.length > 0 ? (\n            <div className=\"space-y-4\">\n              {plan.risks_mitigations.map((item, index) => (\n                <div key={index} className=\"border rounded-lg p-4\">\n                  <div className=\"space-y-2\">\n                    <div>\n                      <Badge variant=\"destructive\" className=\"mb-2\">Risk</Badge>\n                      <p className=\"text-sm\">{item.risk}</p>\n                    </div>\n                    <div>\n                      <Badge variant=\"secondary\" className=\"mb-2\">Mitigation</Badge>\n                      <p className=\"text-sm\">{item.mitigation}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-muted-foreground\">No risks identified for this period.</p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5269},"client/src/components/SummaryTab.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\ninterface SummaryTabProps {\n  markdown: string;\n}\n\nexport default function SummaryTab({ markdown }: SummaryTabProps) {\n  if (!markdown) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <p className=\"text-muted-foreground\">خلاصه اجرایی در دسترس نیست. لطفاً ابتدا گزارش را تحلیل کنید.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // تبدیل ساده markdown به HTML برای فرمت‌بندی پایه\n  const formatMarkdown = (text: string) => {\n    return text\n      .replace(/^# (.+)$/gm, '<h1 class=\"text-2xl font-bold mb-4\">$1</h1>')\n      .replace(/^## (.+)$/gm, '<h2 class=\"text-xl font-semibold mb-3\">$1</h2>')\n      .replace(/^### (.+)$/gm, '<h3 class=\"text-lg font-medium mb-2\">$1</h3>')\n      .replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>')\n      .replace(/\\*(.+?)\\*/g, '<em>$1</em>')\n      .replace(/^- (.+)$/gm, '<li class=\"ml-4\">$1</li>')\n      .replace(/\\n\\n/g, '</p><p class=\"mb-4\">')\n      .replace(/^(?!<[h|l])/gm, '<p class=\"mb-4\">')\n      .replace(/(?<!>)$/gm, '</p>');\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>خلاصه اجرایی</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div \n          className=\"prose prose-sm max-w-none\"\n          dangerouslySetInnerHTML={{ __html: formatMarkdown(markdown) }}\n        />\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1521},"client/src/components/AIAnalyzeTabs.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Brain, Loader2, TrendingUp, TrendingDown, Target, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { miniMD } from \"@/lib/miniMarkdown\";\nimport { sampleAiJson, sampleMarkdown } from \"@/lib/sampleAnalysis\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Try to import Recharts if available, otherwise graceful fallback\nlet Recharts: any = null;\ntry {\n  Recharts = require(\"recharts\");\n} catch (_) {\n  Recharts = null;\n}\n\n// Helper to prepare recharts data\nconst toRecharts = (series: any[]) =>\n  series.map(s => ({\n    name: s.name,\n    data: s.points.map((p: any) => ({ x: p.x, y: p.y }))\n  }));\n\ninterface AIAnalyzeTabsProps {\n  report: any;\n  onUpdate?: (updated: any) => void;\n}\n\nexport default function AIAnalyzeTabs({ report, onUpdate }: AIAnalyzeTabsProps) {\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n  const ai = report?.ai_json || null;\n  const md = report?.ai_markdown || \"\";\n\n  // Check if user is admin\n  const { data: userInfo } = useQuery({\n    queryKey: [\"user-info\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/me\");\n        if (!response.ok) return { role: \"public\" };\n        return response.json();\n      } catch {\n        return { role: \"public\" };\n      }\n    }\n  });\n  const isAdmin = userInfo?.role === \"admin\";\n\n  const runAnalyze = async () => {\n    try {\n      setLoading(true);\n\n      // Try real backend first\n      try {\n        const response = await fetch(`/api/analyze/${report.id}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n          },\n          credentials: \"include\"\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          const updated = {\n            ...report,\n            ai_json: result.ai_json,\n            ai_markdown: result.ai_markdown,\n            score: result.score?.toString() || \"0\"\n          };\n          onUpdate?.(updated);\n          toast({\n            title: \"✅ تحلیل هوشمند کامل شد\",\n            description: \"گزارش با موفقیت تحلیل شد و نتایج آماده است.\",\n          });\n          return;\n        }\n      } catch (e) {\n        console.log(\"Backend not available, using sample data\");\n      }\n\n      // Fallback to sample data\n      const updated = {\n        ...report,\n        ai_json: sampleAiJson,\n        ai_markdown: sampleMarkdown,\n        score: sampleAiJson.score?.toString() || \"0\"\n      };\n      onUpdate?.(updated);\n\n      toast({\n        title: \"🤖 تحلیل نمونه کامل شد\",\n        description: \"از داده‌های نمونه برای نمایش استفاده شده است.\",\n      });\n\n    } catch (e: any) {\n      toast({\n        title: \"Analysis Failed\",\n        description: e?.message || \"Unknown error\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"mt-4\">\n      {!ai && isAdmin && (\n        <Button\n          onClick={runAnalyze}\n          disabled={loading}\n          className=\"flex items-center gap-2\"\n          data-analyze-button\n        >\n          {loading ? (\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n          ) : (\n            <Brain className=\"h-4 w-4\" />\n          )}\n          {loading ? \"در حال تحلیل...\" : \"🤖 تحلیل هوشمند\"}\n        </Button>\n      )}\n      {!ai && !isAdmin && (\n        <div className=\"text-muted-foreground text-center p-4\">\n          <p>تحلیل هوشمند فقط برای مدیران سیستم در دسترس است.</p>\n        </div>\n      )}\n\n      {ai && (\n        <div className=\"mt-4\">\n          <Tabs defaultValue=\"summary\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"summary\">📋 خلاصه اجرایی</TabsTrigger>\n              <TabsTrigger value=\"kpis\">📊 شاخص‌های کلیدی</TabsTrigger>\n              <TabsTrigger value=\"charts\">📈 نمودارها</TabsTrigger>\n              <TabsTrigger value=\"plan\">📅 برنامه ماهانه</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"summary\" className=\"space-y-4\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"prose prose-slate max-w-none dark:prose-invert\">\n                    <div className=\"whitespace-pre-wrap\">\n                      {md.replace(/<[^>]+>/g, ' ')\n                         .replace(/\\*\\*(.*?)\\*\\*/g, '$1')\n                         .replace(/\\*(.*?)\\*/g, '$1')\n                         .replace(/`([^`]+)`/g, '$1')\n                         .trim()}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"kpis\" className=\"space-y-4\">\n              <KPIsView ai={ai} />\n            </TabsContent>\n\n            <TabsContent value=\"charts\" className=\"space-y-4\">\n              {Recharts ? (\n                <ChartsView ai={ai} />\n              ) : (\n                <Card>\n                  <CardContent className=\"p-6 text-center\">\n                    <p className=\"text-muted-foreground\">\n                      برای نمایش نمودارها recharts را نصب کنید: <code>npm i recharts</code>\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"plan\" className=\"space-y-4\">\n              <PlanView plan={ai.next_month_plan} />\n            </TabsContent>\n          </Tabs>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// KPIs & Score View\nfunction KPIsView({ ai }: { ai: any }) {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <span className=\"text-muted-foreground\">امتیاز پیشرفت:</span>\n        <Badge className=\"text-lg px-3 py-1\">\n          {ai.score ?? 0}/100\n        </Badge>\n      </div>\n\n      {ai.trend_summary && (\n        <p className=\"text-muted-foreground\">{ai.trend_summary}</p>\n      )}\n\n      <div className=\"grid md:grid-cols-3 gap-4\">\n        {ai.kpis?.map((k: any, idx: number) => (\n          <Card key={idx}>\n            <CardContent className=\"p-4\">\n              <div className=\"text-sm text-muted-foreground mb-1\">{k.name}</div>\n              <div className=\"text-2xl font-bold\">\n                {k.value} {k.unit || \"\"}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                هدف: {k.target ?? \"-\"}\n              </div>\n              <div className={`text-sm flex items-center gap-1 ${k.delta >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                {k.delta >= 0 ? <TrendingUp className=\"w-4 h-4\" /> : <TrendingDown className=\"w-4 h-4\" />}\n                تغییر: {k.delta}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {ai.insights?.length && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold mb-4\">بینش‌های کلیدی</h3>\n            <div className=\"space-y-2\">\n              {ai.insights.map((x: any, i: number) => (\n                <div key={i} className=\"flex items-start gap-2\">\n                  {x.type === 'win' ? (\n                    <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5\" />\n                  ) : (\n                    <AlertTriangle className=\"w-4 h-4 text-yellow-600 mt-0.5\" />\n                  )}\n                  <span className=\"text-sm\">\n                    <Badge variant=\"outline\" className=\"text-xs mr-2\">\n                      {x.type === 'win' ? 'موفقیت' : x.type === 'risk' ? 'ریسک' : x.type}\n                    </Badge>\n                    {x.text}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\n// Charts View\nfunction ChartsView({ ai }: { ai: any }) {\n  if (!Recharts) return null;\n\n  const { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } = Recharts;\n\n  return (\n    <div className=\"grid md:grid-cols-2 gap-4\">\n      {ai.charts?.map((c: any, idx: number) => {\n        const series = toRecharts(c.series);\n        const data = series[0]?.data ?? [];\n\n        if (c.type === 'line') {\n          return (\n            <Card key={idx}>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-4\">{c.title}</h3>\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={data}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"x\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Line\n                        type=\"monotone\"\n                        dataKey=\"y\"\n                        name={series[0]?.name || 'Series'}\n                        stroke=\"#8884d8\"\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        }\n\n        if (c.type === 'bar') {\n          return (\n            <Card key={idx}>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-4\">{c.title}</h3>\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={data}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"x\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Bar\n                        dataKey=\"y\"\n                        name={series[0]?.name || 'Series'}\n                        fill=\"#8884d8\"\n                      />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        }\n\n        return null;\n      })}\n    </div>\n  );\n}\n\n// Action Plan View\nfunction PlanView({ plan }: { plan: any }) {\n  if (!plan) return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <p className=\"text-muted-foreground\">هیچ برنامه عملیاتی در دسترس نیست.</p>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"font-semibold mb-4\">موضوعات اصلی</h3>\n          <div className=\"flex flex-wrap gap-2\">\n            {plan.focus_themes?.map((theme: string, i: number) => (\n              <Badge key={i} variant=\"secondary\">{theme}</Badge>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"font-semibold mb-4\">برنامه هفتگی</h3>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            {plan.weekly_plan?.map((w: any, i: number) => (\n              <Card key={i} className=\"border-l-4 border-l-blue-500\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Badge>هفته {w.week}</Badge>\n                    <span className=\"text-sm text-muted-foreground\">مسئول: {w.owner || \"-\"}</span>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div>\n                      <span className=\"font-medium text-sm\">اهداف:</span>\n                      <ul className=\"list-disc list-inside text-sm text-muted-foreground\">\n                        {w.goals?.map((g: string, j: number) => <li key={j}>{g}</li>)}\n                      </ul>\n                    </div>\n\n                    <div>\n                      <span className=\"font-medium text-sm\">معیارها:</span>\n                      <div className=\"flex flex-wrap gap-1 mt-1\">\n                        {w.metrics?.map((m: string, j: number) => (\n                          <Badge key={j} variant=\"outline\" className=\"text-xs\">{m}</Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold mb-4\">نقاط عطف</h3>\n            <div className=\"space-y-2\">\n              {plan.milestones?.map((m: any, i: number) => (\n                <div key={i} className=\"flex items-center gap-2\">\n                  <Target className=\"w-4 h-4 text-blue-600\" />\n                  <span className=\"text-sm\">{m.title}</span>\n                  <Badge variant=\"outline\" className=\"text-xs\">{m.due}</Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold mb-4\">ریسک‌ها و راهکارها</h3>\n            <div className=\"space-y-2\">\n              {plan.risks_mitigations?.map((r: any, i: number) => (\n                <div key={i} className=\"text-sm\">\n                  <div className=\"flex items-start gap-2\">\n                    <AlertTriangle className=\"w-4 h-4 text-yellow-600 mt-0.5\" />\n                    <div>\n                      <span className=\"text-muted-foreground\">{r.risk}</span>\n                      <span className=\"mx-2\">→</span>\n                      <span>{r.mitigation}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14386},"client/src/lib/miniMarkdown.ts":{"content":"\n// Very simple Markdown → HTML converter for executive summary display (without library)\nexport function miniMD(md = \"\"): string {\n  let html = md\n    .replace(/^### (.*)$/gmi, '<h3 class=\"text-lg font-bold mb-2\">$1</h3>')\n    .replace(/^## (.*)$/gmi,  '<h2 class=\"text-xl font-bold mb-2\">$1</h2>')\n    .replace(/^\\- (.*)$/gmi,  '<li>$1</li>')\n    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n    .replace(/\\n{2,}/g, '</p><p>')\n    .replace(/\\n/g, '<br/>');\n  \n  // Put lists inside <ul>\n  html = html.replace(/(<li>[\\s\\S]*?<\\/li>)/g, '<ul class=\"list-disc pl-5 space-y-1\">$1</ul>');\n  return `<p>${html}</p>`;\n}\n","size_bytes":621},"client/src/lib/sampleAnalysis.ts":{"content":"\n// Sample AI output for when you don't have API key/backend\nexport const sampleAiJson = {\n  report_id: \"seed\",\n  timeframe: { start: \"2025-08-15\", end: \"2025-09-15\" },\n  kpis: [\n    { name: \"Orders\", value: 120, unit: \"\", target: 150, delta: 15 },\n    { name: \"On-time %\", value: 92, unit: \"%\", target: 95, delta: 3 },\n    { name: \"Revenue\", value: 42000, unit: \"CAD\", target: 50000, delta: 8000 }\n  ],\n  trend_summary: \"Growth in orders and revenue; slight gap to targets.\",\n  insights: [\n    { type: \"win\", text: \"Same-day delivery uptake rose 18%\" },\n    { type: \"risk\", text: \"Driver availability on weekends is tight\" }\n  ],\n  score: 82,\n  charts: [\n    { title: \"Orders per week\", type: \"line\", series: [\n      { name: \"Orders\", points: [\n        { x: \"2025-08-18\", y: 22 },\n        { x: \"2025-08-25\", y: 27 },\n        { x: \"2025-09-01\", y: 31 },\n        { x: \"2025-09-08\", y: 40 }\n      ]}\n    ]},\n    { title: \"Revenue\", type: \"bar\", series: [\n      { name: \"CAD\", points: [\n        { x: \"2025-08-18\", y: 9000 },\n        { x: \"2025-08-25\", y: 10000 },\n        { x: \"2025-09-01\", y: 11000 },\n        { x: \"2025-09-08\", y: 12000 }\n      ]}\n    ]}\n  ],\n  next_month_plan: {\n    focus_themes: [\"On-time rate\", \"B2B partnerships\", \"Cost per delivery\"],\n    weekly_plan: [\n      { week: 1, goals: [\"Audit late routes\", \"Pilot SMS ETA\"], metrics: [\"late%\", \"ETA open%\"], owner: \"Ops\" },\n      { week: 2, goals: [\"Sign 2 partners\", \"Bundle pricing\"], metrics: [\"partners\", \"ARPU\"], owner: \"Sales\" },\n      { week: 3, goals: [\"Optimize dispatch\"], metrics: [\"cost/stop\", \"utilization%\"], owner: \"Ops\" },\n      { week: 4, goals: [\"Review targets\", \"QBR deck\"], metrics: [\"score\", \"target gap\"], owner: \"Exec\" }\n    ],\n    milestones: [{ title: \"2 B2B contracts\", due: \"2025-10-10\" }],\n    risks_mitigations: [{ risk: \"Weekend capacity\", mitigation: \"Hire 2 PT drivers\" }]\n  }\n};\n\nexport const sampleMarkdown = `\n### خلاصه اجرایی\n- سفارشات و درآمد در حال رشد هستند.\n- نرخ تحویل به موقع نزدیک به هدف است؛ نیاز به توجه دارد.\n- فرصت‌هایی در مشارکت‌های B2B و بهینه‌سازی ارسال وجود دارد.\n\n**بهترین دستاوردها**\n- افزایش 18 درصدی تحویل در همان روز.\n\n**ریسک‌های کلیدی**\n- ظرفیت راننده در آخر هفته.\n`;\n","size_bytes":2392},"replit.md":{"content":"# Report Intelligence Platform\n\n## Overview\n\nReport Intelligence is a production-ready AI-powered document analysis platform that enables admin-only uploads with public read access. The system processes HTML, PDF, and image files through automated AI analysis to generate executive summaries, KPIs, interactive charts, and actionable monthly plans. The platform features a modern React frontend with a serverless Express backend, utilizing Supabase for data storage and OpenAI for intelligent document processing.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18 + Vite**: Modern build system with fast HMR and optimized production builds\n- **Tailwind CSS + Shadcn/UI**: Utility-first styling with pre-built component library for consistent design\n- **TanStack Query**: Data fetching and caching with automatic invalidation and background updates\n- **Wouter**: Lightweight client-side routing for SPA navigation\n- **Recharts**: Chart rendering library for data visualization from AI analysis\n\n### Backend Architecture\n- **Express.js + Vercel Serverless**: Node.js server with serverless deployment support\n- **JWT Authentication**: Admin-only access control using HttpOnly cookies with 24-hour expiration\n- **Multer File Processing**: Multi-file upload handling with 20MB limit and type validation\n- **Document Extraction Pipeline**: Text extraction from HTML (JSDOM), PDF (pdf-parse), and images\n- **AI Analysis Integration**: OpenAI API integration with structured JSON schema validation\n\n### Data Storage & Management\n- **Drizzle ORM**: Type-safe database queries with PostgreSQL support\n- **Supabase Integration**: PostgreSQL database for metadata + Storage bucket for files\n- **In-Memory File Storage**: Temporary file handling during processing pipeline\n- **Schema-First Design**: Strict TypeScript interfaces for reports, files, and AI analysis data\n\n### Authentication & Authorization\n- **Admin-Only Upload Model**: Password-based admin authentication with JWT tokens\n- **Public Read Access**: Unauthenticated users can view published reports\n- **Cookie-Based Sessions**: Secure HttpOnly cookies with SameSite=Strict for CSRF protection\n- **Route Protection**: Server-side middleware validates admin access for sensitive operations\n\n### AI Processing Pipeline\n- **Multi-Format Support**: Text extraction from HTML, PDF, and image documents\n- **Structured Output**: JSON schema enforcement for consistent AI responses\n- **Analysis Components**: Executive summaries, KPIs with trends, interactive charts, and 4-week action plans\n- **Fallback Handling**: Graceful degradation when AI services are unavailable\n\n## External Dependencies\n\n### Core Services\n- **Supabase**: PostgreSQL database hosting and file storage bucket management\n- **OpenAI API**: Document analysis and structured content generation\n- **Vercel**: Serverless deployment platform for production hosting\n\n### NPM Packages\n- **@supabase/supabase-js**: Database and storage client integration\n- **@tanstack/react-query**: Client-side data fetching and state management\n- **drizzle-orm**: Type-safe database ORM with migration support\n- **jsonwebtoken**: JWT token generation and validation for authentication\n- **multer**: File upload handling and processing middleware\n- **pdf-parse**: PDF document text extraction capabilities\n- **jsdom**: HTML document parsing and text extraction\n- **recharts**: Chart rendering and data visualization components\n\n### Development Tools\n- **Vite**: Build tool with TypeScript support and hot module replacement\n- **TypeScript**: Static type checking across frontend and backend\n- **Tailwind CSS**: Utility-first CSS framework with design system\n- **ESBuild**: Fast JavaScript bundling for serverless deployment","size_bytes":3811},"client/src/components/FloatingActionButton.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Brain, Plus, BarChart3, Target, Download } from \"lucide-react\";\nimport { X, Zap } from \"lucide-react\";\n\n\ninterface FloatingActionButtonProps {\n  onAction: (action: string) => void;\n}\n\nexport default function FloatingActionButton({ onAction }: FloatingActionButtonProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const actions = [\n    { id: \"analyze\", icon: Brain, label: \"🤖 تحلیل هوشمند\", color: \"bg-blue-500\" },\n    { id: \"charts\", icon: BarChart3, label: \"📈 تولید نمودار\", color: \"bg-green-500\" },\n    { id: \"goals\", icon: Target, label: \"🎯 برنامه ماهانه\", color: \"bg-purple-500\" },\n    { id: \"export\", icon: Download, label: \"📤 صادرات PDF\", color: \"bg-orange-500\" },\n  ];\n\n  return (\n    <div className=\"fixed bottom-6 left-6 z-50\">\n      {isOpen && (\n        <Card className=\"mb-4 shadow-lg\">\n          <CardContent className=\"p-2\">\n            <div className=\"flex flex-col gap-2\">\n              {actions.map((action) => (\n                <Button\n                  key={action.id}\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"justify-start gap-2 h-10\"\n                  onClick={() => {\n                    onAction(action.id);\n                    setIsOpen(false);\n                  }}\n                >\n                  <action.icon className={`h-4 w-4 text-white rounded p-0.5 ${action.color}`} />\n                  {action.label}\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <Button\n        onClick={() => setIsOpen(!isOpen)}\n        className={`h-16 w-16 rounded-full shadow-xl transition-transform ${\n          isOpen ? \"rotate-45\" : \"\"\n        } bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700`}\n      >\n        {isOpen ? <X className=\"h-7 w-7\" /> : <Plus className=\"h-7 w-7\" />}\n      </Button>\n    </div>\n  );\n}","size_bytes":2098},"client/src/components/SmartActionButtons.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Brain, \n  TrendingUp, \n  FileText, \n  Target, \n  AlertTriangle,\n  Download,\n  Share2,\n  RefreshCw,\n  Zap,\n  BarChart3,\n  CheckCircle,\n  Clock\n} from \"lucide-react\";\n\ninterface SmartActionButtonsProps {\n  report: any;\n  onAnalyze?: () => void;\n  onUpdate?: (updated: any) => void;\n}\n\nexport default function SmartActionButtons({ report, onAnalyze, onUpdate }: SmartActionButtonsProps) {\n  const [loading, setLoading] = useState<string>(\"\");\n  const { toast } = useToast();\n  const hasAI = report?.ai_json;\n  const score = hasAI ? report.ai_json.score || 0 : 0;\n\n  // بررسی وضعیت محتوا\n  const hasContent = report?.content && report.content.length > 0;\n  const contentSize = report?.content?.length || 0;\n\n  const handleQuickAnalysis = async () => {\n    if (!hasContent) {\n      toast({\n        title: \"⚠️ محتوا موجود نیست\",\n        description: \"ابتدا فایلی آپلود کنید که محتوا داشته باشد\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(\"analysis\");\n    try {\n      onAnalyze?.();\n      toast({\n        title: \"🧠 تحلیل هوشمند آغاز شد\",\n        description: `در حال تحلیل ${contentSize.toLocaleString()} کاراکتر محتوا...`\n      });\n    } catch (error) {\n      toast({\n        title: \"خطا در تحلیل\",\n        description: \"لطفاً دوباره تلاش کنید\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(\"\");\n    }\n  };\n\n  const handleGenerateCharts = async () => {\n    setLoading(\"charts\");\n    try {\n      // Generate additional charts based on data\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API call\n      toast({\n        title: \"📊 نمودارها تولید شد\",\n        description: \"نمودارهای جدید به گزارش اضافه شدند\"\n      });\n    } finally {\n      setLoading(\"\");\n    }\n  };\n\n  const handleSetGoals = async () => {\n    setLoading(\"goals\");\n    try {\n      // Set smart goals based on KPIs\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      toast({\n        title: \"🎯 اهداف تنظیم شد\",\n        description: \"اهداف هوشمند برای ماه آینده تعریف شدند\"\n      });\n    } finally {\n      setLoading(\"\");\n    }\n  };\n\n  const handleRiskAnalysis = async () => {\n    setLoading(\"risks\");\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1800));\n      toast({\n        title: \"⚠️ تحلیل ریسک\",\n        description: \"ریسک‌های احتمالی شناسایی شدند\"\n      });\n    } finally {\n      setLoading(\"\");\n    }\n  };\n\n  const handleExportPDF = async () => {\n    setLoading(\"export\");\n    try {\n      await new Promise(resolve => setTimeout(resolve, 2500));\n      toast({\n        title: \"📄 PDF آماده شد\",\n        description: \"گزارش به صورت PDF صادر شد\"\n      });\n    } finally {\n      setLoading(\"\");\n    }\n  };\n\n  const getScoreBadgeColor = (score: number) => {\n    if (score >= 80) return \"bg-green-500\";\n    if (score >= 60) return \"bg-yellow-500\";\n    return \"bg-red-500\";\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Primary Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Zap className=\"h-5 w-5 text-blue-500\" />\n            🤖 آرشیو گزارش‌های هوشمند\n            {hasAI && (\n              <Badge className={`${getScoreBadgeColor(score)} text-white`}>\n                امتیاز: {score}/100\n              </Badge>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            {!hasAI ? (\n              <Button \n                onClick={handleQuickAnalysis}\n                disabled={loading === \"analysis\"}\n                className=\"btn flex items-center gap-2\"\n              >\n                {loading === \"analysis\" ? (\n                  <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <Brain className=\"h-4 w-4\" />\n                )}\n                🤖 تحلیل هوشمند\n              </Button>\n            ) : (\n              <Button \n                onClick={handleQuickAnalysis}\n                disabled={loading === \"analysis\"}\n                variant=\"outline\"\n                className=\"flex items-center gap-2\"\n              >\n                {loading === \"analysis\" ? (\n                  <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <RefreshCw className=\"h-4 w-4\" />\n                )}\n                به‌روزرسانی\n              </Button>\n            )}\n\n            <Button \n              onClick={handleGenerateCharts}\n              disabled={loading === \"charts\"}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              {loading === \"charts\" ? (\n                <RefreshCw className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <BarChart3 className=\"h-4 w-4\" />\n              )}\n              نمودارسازی\n            </Button>\n\n            <Button \n              onClick={handleSetGoals}\n              disabled={loading === \"goals\"}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              {loading === \"goals\" ? (\n                <RefreshCw className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Target className=\"h-4 w-4\" />\n              )}\n              تنظیم اهداف\n            </Button>\n\n            <Button \n              onClick={handleRiskAnalysis}\n              disabled={loading === \"risks\"}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              {loading === \"risks\" ? (\n                <RefreshCw className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <AlertTriangle className=\"h-4 w-4\" />\n              )}\n              تحلیل ریسک\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Insights */}\n      {hasAI && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5 text-green-500\" />\n              بینش‌های سریع\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-3\">\n              {report.ai_json.insights?.slice(0, 3).map((insight: any, idx: number) => (\n                <div key={idx} className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n                  {insight.type === \"win\" ? (\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  ) : insight.type === \"risk\" ? (\n                    <AlertTriangle className=\"h-5 w-5 text-red-500\" />\n                  ) : (\n                    <Clock className=\"h-5 w-5 text-blue-500\" />\n                  )}\n                  <span className=\"text-sm\">{insight.text}</span>\n                </div>\n              )) || (\n                <p className=\"text-gray-500 text-sm\">هنوز بینشی استخراج نشده</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Export & Share */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Share2 className=\"h-5 w-5 text-purple-500\" />\n            📤 صادرات و اشتراک\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-3 flex-wrap\">\n            <Button \n              onClick={handleExportPDF}\n              disabled={loading === \"export\"}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              {loading === \"export\" ? (\n                <RefreshCw className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Download className=\"h-4 w-4\" />\n              )}\n              📄 گزارش PDF\n            </Button>\n\n            <Button \n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n              onClick={() => {\n                navigator.clipboard.writeText(window.location.href);\n                toast({\n                  title: \"🔗 لینک گزارش کپی شد\",\n                  description: \"می‌توانید آن را با تیم خود به اشتراک بگذارید\"\n                });\n              }}\n            >\n              <Share2 className=\"h-4 w-4\" />\n              🔗 اشتراک لینک\n            </Button>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-2\">\n            📋 گزارش شامل: خلاصه اجرایی، شاخص‌های کلیدی، نمودارها و برنامه عملیاتی\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9271},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8407},"client/src/pages/Analysis.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Calendar, Search, Filter, BarChart3, TrendingUp, FileText, Clock, Star } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { format } from \"date-fns\";\n\ninterface AnalysisReport {\n  id: number;\n  title: string;\n  upload_date: string;\n  status: string;\n  score?: string;\n  ai_json?: any;\n  ai_markdown?: string;\n}\n\nexport default function AnalysisPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [activeTab, setActiveTab] = useState(\"all\");\n\n  const { data: reports = [], isLoading } = useQuery({\n    queryKey: [\"analysis-reports\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/list\");\n      if (!response.ok) throw new Error(\"Failed to fetch reports\");\n      return response.json();\n    }\n  });\n\n  // Filter and sort reports\n  const filteredReports = reports\n    .filter((report: AnalysisReport) => {\n      const matchesSearch = report.title.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesStatus = filterStatus === \"all\" || \n        (filterStatus === \"analyzed\" && report.ai_json) ||\n        (filterStatus === \"pending\" && !report.ai_json);\n      return matchesSearch && matchesStatus;\n    })\n    .sort((a: AnalysisReport, b: AnalysisReport) => \n      new Date(b.upload_date).getTime() - new Date(a.upload_date).getTime()\n    );\n\n  const analyzedReports = filteredReports.filter((r: AnalysisReport) => r.ai_json);\n  const pendingReports = filteredReports.filter((r: AnalysisReport) => !r.ai_json);\n\n  const getStatusBadge = (report: AnalysisReport) => {\n    if (report.ai_json) {\n      return <Badge className=\"bg-green-100 text-green-800\">تحلیل شده</Badge>;\n    }\n    return <Badge variant=\"secondary\">در انتظار تحلیل</Badge>;\n  };\n\n  const formatDate = (dateString: string) => {\n    return format(new Date(dateString), \"yyyy/MM/dd HH:mm\");\n  };\n\n  const ReportCard = ({ report }: { report: AnalysisReport }) => (\n    <Card key={report.id} className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-lg mb-2\">{report.title}</h3>\n            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-1\">\n                <Calendar className=\"w-4 h-4\" />\n                {formatDate(report.upload_date)}\n              </div>\n              {report.score && (\n                <div className=\"flex items-center gap-1\">\n                  <Star className=\"w-4 h-4\" />\n                  {parseFloat(report.score).toFixed(1)}\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-col items-end gap-2\">\n            {getStatusBadge(report)}\n            <Link href={`/report/${report.id}`}>\n              <Button size=\"sm\" variant=\"outline\" data-testid={`view-report-${report.id}`}>\n                <FileText className=\"w-4 h-4 mr-2\" />\n                مشاهده گزارش\n              </Button>\n            </Link>\n          </div>\n        </div>\n        \n        {report.ai_json && (\n          <div className=\"bg-blue-50 p-3 rounded-lg\">\n            <div className=\"grid grid-cols-3 gap-4 text-sm\">\n              <div className=\"text-center\">\n                <div className=\"font-semibold text-blue-800\">\n                  {report.ai_json.kpis?.length || 0}\n                </div>\n                <div className=\"text-blue-600\">شاخص کلیدی</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"font-semibold text-blue-800\">\n                  {report.ai_json.charts?.length || 0}\n                </div>\n                <div className=\"text-blue-600\">نمودار</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"font-semibold text-blue-800\">\n                  {report.ai_json.insights?.length || 0}\n                </div>\n                <div className=\"text-blue-600\">بینش</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">آرشیو تحلیل‌ها</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            مدیریت و مشاهده تمام تحلیل‌های هوشمند\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"outline\" className=\"text-lg px-4 py-2\">\n            {reports.length} گزارش\n          </Badge>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"جستجو در عنوان گزارش‌ها...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"search-input\"\n              />\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Filter className=\"w-4 h-4\" />\n              <select\n                value={filterStatus}\n                onChange={(e) => setFilterStatus(e.target.value)}\n                className=\"px-3 py-2 border rounded-md\"\n                data-testid=\"filter-status\"\n              >\n                <option value=\"all\">همه</option>\n                <option value=\"analyzed\">تحلیل شده</option>\n                <option value=\"pending\">در انتظار</option>\n              </select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Analysis Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"all\" data-testid=\"tab-all\">\n            همه ({filteredReports.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"analyzed\" data-testid=\"tab-analyzed\">\n            تحلیل شده ({analyzedReports.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"pending\" data-testid=\"tab-pending\">\n            در انتظار ({pendingReports.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"space-y-4\">\n          {filteredReports.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <BarChart3 className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">هیچ گزارشی یافت نشد</h3>\n                <p className=\"text-muted-foreground\">\n                  گزارشی که با معیارهای جستجو مطابقت داشته باشد وجود ندارد.\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4\">\n              {filteredReports.map((report) => (\n                <ReportCard key={report.id} report={report} />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"analyzed\" className=\"space-y-4\">\n          {analyzedReports.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <TrendingUp className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">هنوز تحلیلی انجام نشده</h3>\n                <p className=\"text-muted-foreground\">\n                  گزارش‌هایی که تحلیل شده‌اند در اینجا نمایش داده می‌شوند.\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4\">\n              {analyzedReports.map((report) => (\n                <ReportCard key={report.id} report={report} />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"pending\" className=\"space-y-4\">\n          {pendingReports.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Clock className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">همه گزارش‌ها تحلیل شده‌اند</h3>\n                <p className=\"text-muted-foreground\">\n                  تمام گزارش‌ها تحلیل شده و آماده مشاهده هستند.\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4\">\n              {pendingReports.map((report) => (\n                <ReportCard key={report.id} report={report} />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":9892}},"version":1}